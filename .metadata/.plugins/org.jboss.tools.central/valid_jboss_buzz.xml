<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Virtual Red Hat Summit 2020, April 28-29</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HSRLfbqgRU4/virtual-red-hat-summit-2020-april-28-29.html" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_jbpm" scheme="searchisko:content:tags" /><category term="feed_name_kverlaen" scheme="searchisko:content:tags" /><category term="kogito" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="summit" scheme="searchisko:content:tags" /><author><name>Kris Verlaenen</name></author><id>searchisko:content:id:jbossorg_blog-virtual_red_hat_summit_2020_april_28_29</id><updated>2020-04-24T13:15:30Z</updated><published>2020-04-24T13:14:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: justify;"&gt;Next week &lt;a href="https://www.redhat.com/en/summit"&gt;Red Hat Summit 2020&lt;/a&gt; will be held, not in San Francisco as we were hoping, but as a virtual event.&amp;nbsp; While this unfortunately won't give us the possibility to meet in person, a lot of the keynotes and breakout sessions will be held online.&lt;br /&gt;&lt;br /&gt;Virtual Red Hat Summit is completely FREE, so if you haven't done so yet, &lt;a href="https://reg.summit.redhat.com/"&gt;register&lt;/a&gt; today! &lt;br /&gt;&lt;br /&gt;Below is an overview of various sessions around business automation.&amp;nbsp; So if you're looking for the latest news on &lt;a href="https://kogito.kie.org/"&gt;Kogito&lt;/a&gt;, our next gen cloud-native business automation toolkit, or how to leverage Red Hat Process Automation Manager and Decision Manager for use cases that involve microservice orchestration or machine learning, or to hear from our customers.&amp;nbsp; But take a look at the &lt;a href="https://www.redhat.com/en/summit/agenda/agenda-at-a-glance"&gt;full agenda&lt;/a&gt; as well.&lt;br /&gt;&lt;br /&gt;There will also be an opportunity to come and chat with us in the community area.&amp;nbsp; Or you can just join our &lt;a href="https://kverlaen.blogspot.com/2020/04/new-community-channels-on-zulip-chat.html"&gt;KIE chat channels&lt;/a&gt; we announced recently anytime.&lt;br /&gt;&lt;br /&gt;Below is the list of presentations around business automation that I am aware of !&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The state-of-the-art of developer tools to build business-intelligent apps for RHPAM v7 and Kogito&lt;/b&gt;&lt;br /&gt;Eder Ignatowicz (Red Hat), Alex Porcelli (Red Hat)&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/0d30172c-b5ed-42b8-8d09-c7411e765c59"&gt;NA &amp;amp; LATAM: Tuesday, April 28, 1:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/b05cae84-12ea-4196-9d73-3fe13d4cf272"&gt;EMEA: Tuesday, April 28, 7:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/58f89307-3b6b-4f9f-a32e-f35d5ffc5380"&gt;APAC: Wednesday, April 28, 8:00 am SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Empowering Amadeus’ competitive advantage with cloud-native decision making on Quarkus&lt;/b&gt;&lt;br /&gt;Matteo Casalino (Amadeus), Giacomo Margaria (Amadeus), Mario Fusco (Red Hat)&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/9938bf24-3e21-4503-99d9-d7fd12dd3f2f"&gt;NA &amp;amp; LATAM: Tuesday, April 28, 2:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/a0f86841-13c8-4aec-857e-8818903ff728"&gt;EMEA: Tuesday, April 28, 8:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/d30cc281-1caf-485f-8598-b10780f61319"&gt;APAC: Wednesday, April 29, 11:00 am SGT&lt;/a&gt;&amp;nbsp; &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Modern business workflows as microservices: How we won with Red Hat Process Automation Manager&lt;/b&gt;&lt;br /&gt;Mauro Vocale (Red Hat), Giovanni Marigi (Red Hat)&lt;/div&gt;&lt;ul style="text-align: justify;"&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/d3568634-0dbd-474d-8686-8aeadf965111"&gt;NA &amp;amp; LATAM: Wednesday, April 29, 11:00 am EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/2a92e348-97d2-48b3-8fec-a4361eda8a41"&gt;EMEA: Wednesday, April 29, 10:00 am CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/e01abdc0-f9bd-413e-b356-fd0bae472667"&gt;APAC: Wednesday, April 29, 3:00 pm SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Why building intelligent cloud-native business applications is easier with Kogito&lt;/b&gt;&lt;br /&gt;Kris Verlaenen (Red Hat)&lt;/div&gt;&lt;ul style="text-align: justify;"&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/f9d36108-dde2-4b75-aeca-c7a9f38e4c60"&gt;NA &amp;amp; LATAM: Wednesday, April 29, 1:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/a2519a01-b954-448b-9ec1-1326ee779960"&gt;EMEA: Wednesday, April 29, 1:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/b67fb55b-3931-45ff-8014-e0ab58163741"&gt;APAC: Wednesday, April 29, 4:00 pm SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Cloud, sweet cloud: Feeling at home with serverless decision making using Kogito and Camel-K&lt;/b&gt;&lt;br /&gt;Daniele Zonca (Red Hat), Edoardo Vacchi (Red Hat), Luca Burgazzoli (Red Hat)&lt;/div&gt;&lt;ul style="text-align: justify;"&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/4fbccc9d-008f-48dc-a43e-9505639d97f2"&gt;NA &amp;amp; LATAM: Wednesday, April 29, 2:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/81e685ec-8e19-4c9a-be83-b2be7ee50929"&gt;EMEA: Wednesday, April 29, 5:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/53d186d7-ca57-4847-a5e4-d6373092f0f1"&gt;APAC: Wednesday, April 29, 5:00 pm SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Integrating scalable machine learning into business workflows&lt;/b&gt;&lt;br /&gt;Rui Vieira (Red Hat)&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;/div&gt;&lt;ul style="text-align: justify;"&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/5b81c995-4767-40b4-a1f0-8dba7132dca6"&gt;NA &amp;amp; LATAM: Wednesday, April 29, 2:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/cb2f681a-7bfb-4144-b9be-e3326c3b72e6"&gt;EMEA: Wednesday, April 29, 5:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/9e3d032b-8a6a-4350-a589-dac67e750b29"&gt;APAC: Wednesday, April 29, 5:00 pm SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Solve the unsolvable: Why artificial intelligent systems can solve planning problems better than humans&lt;/b&gt;&lt;br /&gt;Satish Kale (Red Hat), Geoffrey De Smet (Red Hat)&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;/div&gt;&lt;ul style="text-align: justify;"&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/3d11278e-fc22-4d7d-944d-966cdf0a328b"&gt;NA &amp;amp; LATAM: Wednesday, April 29, 2:00 pm EDT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/2a8c60db-9c2c-4eef-ae58-74766528a070?sb=false"&gt;EMEA: Wednesday, April 29, 5:00 pm CEST&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://summit.redhat.com/conference/sessions/details/bb5d9ab5-214d-4a10-8299-aa113ad9c958"&gt;APAC: Wednesday, April 29, 5:00 pm SGT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: justify;"&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;b&gt;Transforming decision automation to be cloud-based and FaaS-like at BBVA&lt;/b&gt;&lt;br /&gt;Antonio Valle Gutierrez (BBVA), Beatriz Alzola (BBVA), Marcos Regidor (Red Hat)&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;i&gt;This is available on demand so no specific timing.&lt;/i&gt;&lt;/div&gt;&lt;div style="text-align: justify;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HSRLfbqgRU4" height="1" width="1" alt=""/&gt;</content><summary>Next week Red Hat Summit 2020 will be held, not in San Francisco as we were hoping, but as a virtual event.  While this unfortunately won't give us the possibility to meet in person, a lot of the keynotes and breakout sessions will be held online. Virtual Red Hat Summit is completely FREE, so if you haven't done so yet, register today! Below is an overview of various sessions around business autom...</summary><dc:creator>Kris Verlaenen</dc:creator><dc:date>2020-04-24T13:14:00Z</dc:date><feedburner:origLink>http://kverlaen.blogspot.com/2020/04/virtual-red-hat-summit-2020-april-28-29.html</feedburner:origLink></entry><entry><title>Free book on Knative covering Camel K and Kafka and upcoming webinar with live demos</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UQRgl6i-5Lg/free-book-on-knative-covering-camel-k.html" /><category term="book" scheme="searchisko:content:tags" /><category term="camelk" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="webinar" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-free_book_on_knative_covering_camel_k_and_kafka_and_upcoming_webinar_with_live_demos</id><updated>2020-04-24T07:38:11Z</updated><published>2020-04-24T07:38:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I want to say my congratulations to two of my fellow red hatters, Burr Sutter &amp;amp; Kamesh Sampath whom have published a new book on Knative - &lt;a href="https://dn.dev/knative-cookbook"&gt;Knative Cookbook&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://dn.dev/knative-cookbook"&gt;&lt;img border="0" data-original-height="875" data-original-width="665" height="320" src="https://1.bp.blogspot.com/-ehd576weCIc/XqKWlik09xI/AAAAAAAACJg/TSFkWM_COjYizZUNZgJK4gdnUoUmdSY-wCLcBGAsYHQ/s320/unnamed.png" width="243" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Blog post announcement:&amp;nbsp;&lt;a href="https://developers.redhat.com/blog/2020/04/23/knative-cookbook-building-effective-serverless-applications-with-kubernetes-and-openshift/"&gt;book launch&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The book is around 150 pages and is a cookbook style, so it's a great learner book and with step by step instructions to try out first hand.&lt;br /&gt;&lt;br /&gt;The book has a chapter on Apache Camel K which is fantastic. They show you how to get started with Camel K and then continue to add Knative into the mix and how Camel K easily adapts to Knative being present in the platform.&lt;br /&gt;&lt;br /&gt;Kamesh will show all the greatness of Knative together with Kafka and Kamel, in his upcoming&amp;nbsp; webinar:&amp;nbsp;&lt;a href="https://developers.redhat.com/devnation/tech-talks/4K-Kubernetes-with-Knative-Kafka-and-Kamel/"&gt;4K Kubernetes with Knative, Kafka, and Kamel&lt;/a&gt; scheduled at April 30th. So this is a great opportunity to hear first hand from the author, and see live demos, and just relax with a cup of coffee/tea or maybe even a cold beer. I surely will do that, maybe all 3 ... or skip the tea ;)&lt;br /&gt;&lt;br /&gt;So I suggest to go &lt;a href="https://dn.dev/knative-cookbook"&gt;download the free book&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/devnation/tech-talks/4K-Kubernetes-with-Knative-Kafka-and-Kamel/"&gt;register for the webinar&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=EEsjK1-w3ao:eWWaP4SGrp4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=EEsjK1-w3ao:eWWaP4SGrp4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=EEsjK1-w3ao:eWWaP4SGrp4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=EEsjK1-w3ao:eWWaP4SGrp4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=EEsjK1-w3ao:eWWaP4SGrp4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=EEsjK1-w3ao:eWWaP4SGrp4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=EEsjK1-w3ao:eWWaP4SGrp4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/EEsjK1-w3ao" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UQRgl6i-5Lg" height="1" width="1" alt=""/&gt;</content><summary>I want to say my congratulations to two of my fellow red hatters, Burr Sutter &amp; Kamesh Sampath whom have published a new book on Knative - Knative Cookbook. Blog post announcement: book launch. The book is around 150 pages and is a cookbook style, so it's a great learner book and with step by step instructions to try out first hand. The book has a chapter on Apache Camel K which is fantastic. They...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-04-24T07:38:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/EEsjK1-w3ao/free-book-on-knative-covering-camel-k.html</feedburner:origLink></entry><entry><title>Integrating Kubeflow with Red Hat OpenShift Service Mesh</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2oKweAqx9wQ/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Jaeger tracing" scheme="searchisko:content:tags" /><category term="Kiali" scheme="searchisko:content:tags" /><category term="Kubeflow" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Open Data Hub" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>Juana Nakfour</name></author><id>searchisko:content:id:jbossorg_blog-integrating_kubeflow_with_red_hat_openshift_service_mesh</id><updated>2020-04-24T07:00:53Z</updated><published>2020-04-24T07:00:53Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://opendatahub.io/"&gt;Open Data Hub&lt;/a&gt; is an open source project providing an end-to-end artificial intelligence and machine learning (AI/ML) platform that runs on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;. As we explained in our &lt;a href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;previous article&lt;/a&gt;, we see real potential and value in the Kubeflow project, and we&amp;#8217;ve enabled Kubeflow 0.7 on RedHat OpenShift 4.2. Kubeflow installs multiple AI/ML components and requires &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt; to control and route service traffic.&lt;/p&gt; &lt;p&gt;As part of the Open Data Hub project, we&amp;#8217;ve also integrated Kubeflow with &lt;a href="https://www.redhat.com/en/about/press-releases/red-hat-launches-openshift-service-mesh-accelerate-adoption-microservices-and-cloud-native-applications"&gt;Red Hat OpenShift Service Mesh&lt;/a&gt;. In this article, we present Red Hat OpenShift Service Mesh as an alternative to the native Kubeflow Istio installation, especially for users who already have OpenShift Service Mesh installed on their cluster.&lt;/p&gt; &lt;p&gt;&lt;span id="more-698717"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Red Hat OpenShift Service Mesh&lt;/h2&gt; &lt;p&gt;For scalability and fault tolerance, most cloud-based applications are designed using microservices and dependencies. A &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh"&gt;service mesh&lt;/a&gt; is an infrastructure layer that connects microservices working together in a shared-services architecture. OpenShift Service Mesh is based on Istio and provides similar mechanisms for securing, controlling, and routing microservices. It also offers additional features and ease of installation.&lt;/p&gt; &lt;p&gt;As a key feature, OpenShift Service Mesh supports a multi-tenant control plane, which makes it easy to manage multiple service-mesh ecosystems within a single cluster. Simply declare a namespace in your instance of the Istio Service Mesh Member Roll and it will be included in a service mesh.&lt;/p&gt; &lt;p&gt;OpenShift Service Mesh also comes with Kiali and Jaeger installed by default. &lt;a target="_blank" rel="nofollow" href="https://kiali.io"&gt;Kiali&lt;/a&gt; provides an interactive graph of the microservices in your service mesh, where you can see how services are connected and what controls are imposed for each one. &lt;a target="_blank" rel="nofollow" href="https://www.jaegertracing.io"&gt;Jaeger&lt;/a&gt; is an open source distributed-tracing platform that lets you monitor and troubleshoot interactions between microservices.&lt;/p&gt; &lt;p&gt;Later in the article, we&amp;#8217;ll guide you through the process of installing OpenShift Service Mesh and its required components, which you can do easily from Red Hat OpenShift Container Platform&amp;#8217;s OperatorHub.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.3/html/service_mesh/service-mesh-architecture"&gt;Red Hat OpenShift Service Mesh documentation&lt;/a&gt; for more detailed information.&lt;/p&gt; &lt;h2&gt;Integrating Kubeflow 0.7 with Red Hat OpenShift Service Mesh&lt;/h2&gt; &lt;p&gt;We had to make several changes to integrate Kubeflow 0.7 with Red Hat OpenShift Service Mesh. In this section, we&amp;#8217;ll briefly describe the changes, which you can also find listed on Open Data Hub&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io/manifests"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Allow traffic to the Katib controller service&lt;/h3&gt; &lt;p&gt;OpenShift Service Mesh defines network policies for all namespaces that are listed as a member of a given service mesh. Traffic that is not defined in a network policy is blocked. We added an overlay to the Kubeflow Istio component that creates a network policy allowing traffic to the &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/katib"&gt;Katib controller service&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;kind: NetworkPolicy apiVersion: networking.k8s.io/v1 metadata: name: allow-ingress-tokubelfow namespace: kubeflow spec: podSelector: matchLabels: app: katib-controller ingress: - from: - namespaceSelector: {} - ports: - protocol: TCP port: 443 policyTypes: - Ingress &lt;/pre&gt; &lt;h3&gt;Support for the multi-tenant control plane&lt;/h3&gt; &lt;p&gt;In the same overlay, we replaced Istio&amp;#8217;s &lt;code&gt;ClusterRbacConfig&lt;/code&gt; with &lt;a target="_blank" rel="nofollow" href="https://maistra.io/docs/examples/mesh-wide_rbac/"&gt;&lt;code&gt;ServiceMeshRbacConfig&lt;/code&gt;&lt;/a&gt;, which supports a multi-tenant control plane. We also replaced the &lt;code&gt;ClusterRoleBinding&lt;/code&gt; with a project-scoped &lt;code&gt;RoleBinding&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;A new component and Kfctl file&lt;/h3&gt; &lt;p&gt;We added a new component within the &lt;code&gt;istio-system&lt;/code&gt; namespace that creates a &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt; resource and adds the &lt;code&gt;kubeflow&lt;/code&gt; namespace as a member:&lt;/p&gt; &lt;pre&gt;apiVersion: maistra.io/v1 kind: ServiceMeshMemberRoll metadata: # the service must be named default name: default namespace: istio-system spec: members: # a list of projects joined into the service mesh - kubeflow &lt;/pre&gt; &lt;p&gt;We also added a new &lt;code&gt;kfctl&lt;/code&gt; file to the service mesh, &lt;code&gt;kfdef/kfctl_openshift-servicemesh.yaml&lt;/code&gt;. Doing this updates the control plane for deploying and managing Kubeflow within OpenShift Service Mesh.&lt;/p&gt; &lt;h2&gt;Installing Kubeflow 0.7 with Red Hat OpenShift Service Mesh&lt;/h2&gt; &lt;p&gt;We described the prerequisites for installing Kubeflow 0.7 in our &lt;a href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;previous article&lt;/a&gt;. Mainly, you will need an OpenShift 4.2 or higher cluster and the &lt;code&gt;kfctl&lt;/code&gt; command-line tool. This section guides you through the installation.&lt;/p&gt; &lt;h3&gt;Step 1: Install Red Hat OpenShift Service Mesh&lt;/h3&gt; &lt;p&gt;It is crucial to install the correct version of Red Hat OpenShift Service Mesh for your OpenShift cluster. For this example, we&amp;#8217;ll use the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html/service_mesh/service-mesh-installation#installing-ossm"&gt;OpenShift Container Platform 4.2 installation&lt;/a&gt;. The OpenShift Service Mesh installation automatically includes the following operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Elasticsearch Operator&lt;/li&gt; &lt;li&gt;Jaeger Operator&lt;/li&gt; &lt;li&gt;Kiali Operator&lt;/li&gt; &lt;li&gt;Red Hat Service Mesh Operator&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Be sure to wait for confirmation of each successful installation before continuing.&lt;/p&gt; &lt;h3&gt;Step 2: Create an instance of ServiceMeshControlPlane&lt;/h3&gt; &lt;p&gt;After installing all of the required operators, create an instance of &lt;code&gt;ServiceMeshControlPlane&lt;/code&gt;. The default in the example will work. You do not need to install a &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt; instance; that will be created automatically when you install Kubeflow.&lt;/p&gt; &lt;h3&gt;Step 3: Clone the opendatahub-manifest fork repo&lt;/h3&gt; &lt;p&gt;From a terminal, log in to the OpenShift Container Platform cluster and clone the &lt;code&gt;opendatahub-manifest&lt;/code&gt; fork repo, which defaults to the branch, &lt;code&gt;v0.7.0-branch-openshift&lt;/code&gt;, as shown:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/opendatahub-io/manifests.git $ cd manifests &lt;/pre&gt; &lt;h3&gt;Step 4: Install Kubeflow&lt;/h3&gt; &lt;p&gt;Next, use the OpenShift Service Mesh configuration file and the locally downloaded manifests to install Kubeflow:&lt;/p&gt; &lt;pre&gt;$ sed -i 's#uri: .*#uri: '$PWD'#' ./kfdef/kfctl_openshift_servicemesh.yaml (on mac try $ sed -i "" 's#uri: .*#uri: '$PWD'#' ./kfdef/kfctl_openshift_servicemesh.yaml) $ kfctl build --file=kfdef/kfctl_openshift_servicemesh.yaml -V $ kfctl apply --file=./kfdef/kfctl_openshift_servicemesh.yaml -V &lt;/pre&gt; &lt;p&gt;Note that at the time of this writing, we are addressing &lt;a target="_blank" rel="nofollow" href="https://github.com/kubeflow/kubeflow/issues/4678"&gt;a Kubeflow installation bug&lt;/a&gt; that does not allow downloading the manifests during a build process.&lt;/p&gt; &lt;h3&gt;Step 5: Check the virtual services&lt;/h3&gt; &lt;p&gt;Check the virtual services that were created by Kubeflow components:&lt;/p&gt; &lt;pre&gt;$ oc get virtualservices -n kubeflow NAME GATEWAYS HOSTS AGE argo-ui [kubeflow-gateway] [*] 4m20s centraldashboard [kubeflow-gateway] [*] 4m19s google-api-vs [www.googleapis.com] 4m23s google-storage-api-vs [storage.googleapis.com] 4m23s grafana-vs [kubeflow-gateway] [*] 4m22s jupyter-web-app [kubeflow-gateway] [*] 4m12s katib-ui [kubeflow-gateway] [*] 4m1s kfam [kubeflow-gateway] [*] 3m52s metadata-grpc [kubeflow-gateway] [*] 4m9s metadata-ui [kubeflow-gateway] [*] 4m9s ml-pipeline-tensorboard-ui [kubeflow-gateway] [*] 3m56s ml-pipeline-ui [kubeflow-gateway] [*] 3m55s tensorboard [kubeflow-gateway] [*] 4m6s &lt;/pre&gt; &lt;p&gt;Also, check the Kubeflow gateway:&lt;/p&gt; &lt;pre&gt;$ oc get gateways -n kubeflow NAME AGE kubeflow-gateway 5m35s &lt;/pre&gt; &lt;p&gt;That completes the installation. Next, let&amp;#8217;s get started with Kubeflow on OpenShift Service Mesh.&lt;/p&gt; &lt;h2&gt;Access the Kubeflow portal&lt;/h2&gt; &lt;p&gt;To access the Kubeflow portal, go to the &lt;code&gt;istio-system&lt;/code&gt; namespace and click on the &lt;code&gt;istio-ingressgateway&lt;/code&gt; route from the &lt;strong&gt;Networking&lt;/strong&gt; menu item. Kubeflow will ask you to specify a namespace where you can run pipelines and Jupyter Notebook servers. Enter a namespace, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_699347" style="width: 516px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.04.22-PM.png"&gt;&lt;img aria-describedby="caption-attachment-699347" class="wp-image-699347 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.04.22-PM.png" alt="A screenshot of the Namespace window in Kubeflow's web interface." width="506" height="477" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.04.22-PM.png 506w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.04.22-PM-300x283.png 300w" sizes="(max-width: 506px) 100vw, 506px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-699347" class="wp-caption-text"&gt;Figure 1. Name your new namespace in Kubeflow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Kubeflow creates this namespace, so we have to add it to the &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt;. (The &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt; was created when we installed Kubeflow, but at the moment we have to add the namespace manually. We&amp;#8217;re working on automating this process.)&lt;/p&gt; &lt;p&gt;To add the namespace, go to &lt;strong&gt;istio-system namespace&lt;/strong&gt; &lt;strong&gt;&amp;#8211;&amp;#62;&lt;/strong&gt; &lt;strong&gt;Installed Operators&lt;/strong&gt; &lt;strong&gt;&amp;#8211;&amp;#62;&lt;/strong&gt; &lt;strong&gt;Red Hat OpenShift Service Mesh&lt;/strong&gt; &lt;strong&gt;&amp;#8211;&amp;#62;&lt;/strong&gt; &lt;strong&gt;Istio Service Mesh Member Roll&lt;/strong&gt; &lt;strong&gt;&amp;#8211;&amp;#62;default&lt;/strong&gt; &lt;strong&gt;&amp;#8211;&amp;#62;&lt;/strong&gt; &lt;strong&gt;yaml&lt;/strong&gt;. Add your namespace under &lt;code&gt;spec.members&lt;/code&gt;, as shown in Figure 2. Note that this is for the namespace &lt;code&gt;nakfour&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_699357" style="width: 514px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-23-at-9.21.07-AM.png"&gt;&lt;img aria-describedby="caption-attachment-699357" class="wp-image-699357 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-23-at-9.21.07-AM.png" alt="A screenshot showing the console, where the namespace &amp;#34;Nakfour&amp;#34; has been added under spec.members." width="504" height="689" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-23-at-9.21.07-AM.png 504w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-23-at-9.21.07-AM-219x300.png 219w" sizes="(max-width: 504px) 100vw, 504px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-699357" class="wp-caption-text"&gt;Figure 2. Add a user namespace to the member roll.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Create a Jupyter Notebook server&lt;/h2&gt; &lt;p&gt;At this point, you should be able to create a Jupyter Notebook server. Be sure to select the namespace you added to the &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt;, and select the &lt;a target="_blank" rel="nofollow" href="https://quay.io/repository/kubeflow/tf-notebook-image?tag=latest&amp;#38;tab=tags"&gt;custom notebook image&lt;/a&gt; from our &lt;a href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;previous article&lt;/a&gt;. These steps are shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_699367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-699367" class="wp-image-699367 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.33.59-PM-1024x409.png" alt="A screenshot of the option to collect a custom notebook image." width="640" height="256" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.33.59-PM-1024x409.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.33.59-PM-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.33.59-PM-768x307.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Screen-Shot-2020-03-20-at-3.33.59-PM.png 1271w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-699367" class="wp-caption-text"&gt;Figure 3. Create a Jupyter Notebook server.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion and next steps&lt;/h2&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://opendatahub.io/"&gt;Open Data Hub&lt;/a&gt; team is currently working on enhancements and features for Open Data Hub. These include being able to use the &lt;code&gt;kfctl&lt;/code&gt; operator to co-install integrated Open Data Hub and Kubeflow components; automating the Red Hat OpenShift Service Mesh installation; and automating the process to add namespaces created by the Kubeflow profile controller in the &lt;code&gt;ServiceMeshMemberRoll&lt;/code&gt;.  You can find all of our work in the &lt;a target="_blank" rel="nofollow" href="https://github.com/opendatahub-io"&gt;Open Data Hub GitHub repository&lt;/a&gt; and the &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/opendatahub"&gt;Open Data Hub GitLab repository&lt;/a&gt;. We also invite you to join us for our &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/opendatahub/opendatahub-community"&gt;bi-weekly community meetings&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#38;linkname=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fintegrating-kubeflow-with-red-hat-openshift-service-mesh%2F&amp;#038;title=Integrating%20Kubeflow%20with%20Red%20Hat%20OpenShift%20Service%20Mesh" data-a2a-url="https://developers.redhat.com/blog/2020/04/24/integrating-kubeflow-with-red-hat-openshift-service-mesh/" data-a2a-title="Integrating Kubeflow with Red Hat OpenShift Service Mesh"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/24/integrating-kubeflow-with-red-hat-openshift-service-mesh/"&gt;Integrating Kubeflow with Red Hat OpenShift Service Mesh&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2oKweAqx9wQ" height="1" width="1" alt=""/&gt;</content><summary>Open Data Hub is an open source project providing an end-to-end artificial intelligence and machine learning (AI/ML) platform that runs on Red Hat OpenShift. As we explained in our previous article, we see real potential and value in the Kubeflow project, and we’ve enabled Kubeflow 0.7 on RedHat OpenShift 4.2. Kubeflow installs multiple AI/ML components and requires Istio to control and route serv...</summary><dc:creator>Juana Nakfour</dc:creator><dc:date>2020-04-24T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/24/integrating-kubeflow-with-red-hat-openshift-service-mesh/</feedburner:origLink></entry><entry><title>Ramp up on Quarkus: A Kubernetes-native Java framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/P6f4Z5u-IVg/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Saharsh Singh</name></author><id>searchisko:content:id:jbossorg_blog-ramp_up_on_quarkus_a_kubernetes_native_java_framework</id><updated>2020-04-24T07:00:33Z</updated><published>2020-04-24T07:00:33Z</published><content type="html">&lt;p&gt;Java has been in a bit of an awkward spot since containers took off a few years ago. In the world of &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;, it has been getting harder and harder to ignore that Java applications are, by today’s standards, bloated. Well, until now. In this article, I explore the basics of Quarkus, a Kubernetes-native Java framework built to specifically address Java’s bloatedness problem.&lt;/p&gt; &lt;h2&gt;Java of yore&lt;/h2&gt; &lt;p&gt;For years, many of us looked the other way when confronted with the bloatedness of Java. Who cares if my server-side app:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Needed hundreds of megabytes worth of class files.&lt;/li&gt; &lt;li&gt;Created gigabytes worth of runtime memory footprint.&lt;/li&gt; &lt;li&gt;Took up to a minute (or five) to start up.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I definitely didn’t care, because my &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; application would then run reliably on a powerful piece of hardware or virtual machine for months, if not years, serving hundreds of requests concurrently. Not to mention, as a language, Java gave organizations pretty much everything they needed to maintain software for a long time using a large team of professionals with varying levels of skills.&lt;/p&gt; &lt;p&gt;The Java Virtual Machine (JVM) has long promised and been delivered as a &amp;#8220;write once, run (almost) anywhere&amp;#8221; platform. Type safety, object-oriented programming support, and an unrivaled set of options in tooling and libraries have long made Java an excellent choice for team-based software development. Further, with enterprise-grade application servers (for example, EAP, WebLogic, and Tomcat), organizations also had a resilient and feature-rich platform for their Java web applications. These applications simply needed to comply with JavaEE standards around describing deployment concerns (think &lt;code&gt;web.xml&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Any JavaEE-compliant application server would then take care of operational concerns like security, logging, connecting to databases/queues, and scaling. It’s no surprise that for years Java has dominated the programming language landscape as the de facto standard for the enterprise.&lt;/p&gt; &lt;h2&gt;Kubernetes: The new application server&lt;/h2&gt; &lt;p&gt;It has &lt;a href="https://developers.redhat.com/blog/2018/06/28/why-kubernetes-is-the-new-application-server/"&gt;been observed before&lt;/a&gt; that Kubernetes is the new application server. Containers and Kubernetes have taken the &amp;#8220;write once run anywhere&amp;#8221; paradigm of the JVM and extended it to most other programming languages. Now applications written in any language can leverage Kubernetes for operational concerns and decouple themselves from runtime infrastructure. These applications just have to be delivered in compliant Linux containers.&lt;/p&gt; &lt;p&gt;With this structure in place, developers can code their applications in their favorite programming language and count on Kubernetes to handle operational concerns like logging, scaling, healing, and networking. Add in the &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio service mesh&lt;/a&gt; and you even have out-of-box fault tolerance and application-level metrics without a single line of application code. Today we find ourselves in a tech landscape that overwhelmingly prefers &lt;a target="_blank" rel="nofollow" href="http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/"&gt;horizontal scaling of automated cattle over vertical scaling of manually cared for pets&lt;/a&gt;. Microservices and serverless/&lt;span style="font-weight: 400;"&gt;Function-as-a-Service (FaaS)&lt;/span&gt; applications have become all the rage, and both benefit greatly from low memory footprints and blazing-fast startup times.&lt;/p&gt; &lt;p&gt;So, with all of this said, it becomes increasingly harder to ignore that my Java container images are even larger in size as well as memory footprint, and they take quite a bit longer to start up, especially when compared to a language like Golang. Modern cloud-native frameworks like &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt; or Dropwizard have helped, but startup times are still at least 10 seconds or more, and runtime memory footprint is at least in the hundreds of megabytes.&lt;/p&gt; &lt;h2&gt;Enter Quarkus&lt;/h2&gt; &lt;p&gt;Quarkus aims to tackle the bloatedness problem of Java head-on. Marketed as &lt;i&gt; Supersonic Subatomic Java&lt;/i&gt;, Quarkus leverages &lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="http://openjdk.java.net/groups/hotspot/"&gt;HotSpot&lt;/a&gt; to provide developers with a framework to create applications from Java code with fast boot times and low RSS memory. The following figure from &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt; quarkus.io&lt;/a&gt; does a good job illustrating the benefits. Notice the drastic difference in both RSS memory and boot time between Quarkus native and the traditional cloud-native stack.&lt;/p&gt; &lt;div id="attachment_710677" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-710677" class="wp-image-710677 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/quarkus_metrics_graphic_bootmem_wide-1024x473.png" alt="Screen showing Quarkus metrics" width="640" height="296" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/quarkus_metrics_graphic_bootmem_wide-1024x473.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/quarkus_metrics_graphic_bootmem_wide-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/quarkus_metrics_graphic_bootmem_wide-768x355.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-710677" class="wp-caption-text"&gt;&lt;em&gt;Source: &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Quarkus.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;OpenJDK and GraalVM&lt;/h2&gt; &lt;p&gt;As evident from the figure above, Quarkus has two modes: JVM and native. The native mode uses GraalVM to create a &lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/docs/reference-manual/native-image/"&gt; standalone executable&lt;/a&gt; that doesn’t run in a Java VM, and the greatest efficiency gains come from running a Quarkus application in this mode. However, not every JVM feature works in native mode, and the most notorious of these lost features is &lt;a target="_blank" rel="nofollow" href="https://www.oracle.com/technical-resources/articles/java/javareflection.html"&gt; reflection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This fact can be a huge problem as many frameworks and libraries that Java developers depend on for everyday development rely heavily on reflection. GraalVM works around this by allowing classes to be registered for reflection at compile time. While this process can be cumbersome when working directly with GraalVM, Quarkus streamlines the registration process by detecting and auto-registering as many of your code’s reflection candidates as possible.&lt;/p&gt; &lt;p&gt;While Quarkus does a pretty good job with auto-registering most reflection candidates, you might still run into instances where you have to explicitly register some of your classes using &lt;a target="_blank" rel="nofollow" href="https://javadoc.io/doc/io.quarkus/quarkus-core/latest/io/quarkus/runtime/annotations/RegisterForReflection.html"&gt;Quarkus’s &lt;code&gt;RegisterForReflection&lt;/code&gt; annotation&lt;/a&gt;. This process might become more trouble than it&amp;#8217;s worth in some projects. For this reason, as well as just general flexibility, Quarkus also offers the JVM mode. In JVM mode, Quarkus apps are packaged as JAR files and run on the OpenJDK HotSpot JVM.&lt;/p&gt; &lt;h2&gt;Show me the code!&lt;/h2&gt; &lt;p&gt;So having set the stage, let’s look at some code. To get started with Quarkus, I put together a JAX-RS application following the excellent &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/getting-started"&gt;getting started guides from Quarkus&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app"&gt;See my repo&lt;/a&gt; for the application&amp;#8217;s code. This application is a simple service that can be used to store, update, retrieve, and delete arbitrary text values. I mostly just followed the guide as I wrote my code. I built the application out in the following stages.&lt;/p&gt; &lt;h3&gt;Core application&lt;/h3&gt; &lt;p&gt;In this stage, I created the core application with all the API endpoints. I started by generating an app skeleton using the &lt;code&gt;quarkus-maven-plugin&lt;/code&gt; and adding the &lt;code&gt;resteasy-jackson&lt;/code&gt; extension for JSON support:&lt;/p&gt; &lt;pre&gt;mvn io.quarkus:quarkus-maven-plugin:1.3.2.Final:create \ -DprojectGroupId=org.saharsh \ -DprojectArtifactId=sample-quarkus-app \ -DclassName="org.saharsh.samples.quarkus.resources.ValuesResource" \ -Dpath="/api/values" mvn quarkus:add-extension -Dextensions="resteasy-jackson"&lt;/pre&gt; &lt;p&gt;Some changes I made include getting rid of &lt;code&gt;.dockerignore&lt;/code&gt; and the &lt;code&gt;Dockerfile&lt;/code&gt; examples generated by the &lt;code&gt;quarkus-maven-plugin&lt;/code&gt;&amp;#8216;s create task. Instead, I prefer to use a &lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;multi-stage Dockerfile&lt;/a&gt; (see &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/Dockerfile"&gt; JVM&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/Dockerfile.native"&gt; Native&lt;/a&gt;) to keep my build concerns in one file. After this, I just added my application code as captured &lt;a href="https://github.com/saharsh-samples/sample-quarkus-app/releases/tag/core-app"&gt;in this tag&lt;/a&gt; (or &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/commit/b087b495cee5c35ea7e8072fe2bb4d08a2dd29f5"&gt; commit&lt;/a&gt;).&lt;/p&gt; &lt;h3&gt;Metrics and health checks&lt;/h3&gt; &lt;p&gt;Metrics and health checks are crucial in creating twelve-factor applications. Quarkus leverages &lt;a target="_blank" rel="nofollow" href="https://projects.eclipse.org/projects/technology.microprofile"&gt;Microprofile&lt;/a&gt;, which makes adding these features pretty straightforward:&lt;/p&gt; &lt;pre&gt;mvn quarkus:add-extension -Dextensions="metrics"&lt;/pre&gt; &lt;p&gt;&lt;a href="https://github.com/saharsh-samples/sample-quarkus-app/releases/tag/metrics"&gt;See this tag&lt;/a&gt; (and &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/commit/303174f467a1ffcf95e758235ec8f08eb50cedec"&gt; commit&lt;/a&gt;) for the metrics I added for the application. My application collects timing metrics for all of its exposed API endpoints. It also contains a gauge of the value store’s size. These metrics are published at the &lt;code&gt;/metrics&lt;/code&gt; endpoint, which contains base, vendor, and application metrics. Each one of those subgroups also has its own endpoint (for example, &lt;code&gt;/metrics/application&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;mvn quarkus:add-extension -Dextensions="health"&lt;/pre&gt; &lt;p&gt;Similarly, see this &lt;a href="https://github.com/saharsh-samples/sample-quarkus-app/releases/tag/healthchecks"&gt; tag&lt;/a&gt; (and &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/commit/784451eb13fb3aedffc433270dfeedf57abb24dc"&gt; commit&lt;/a&gt;) for the health checks. I added a &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/java/org/saharsh/samples/quarkus/health/LivenessCheck.java"&gt; liveness check&lt;/a&gt; and a &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/java/org/saharsh/samples/quarkus/health/ReadinessCheck.java"&gt; readiness check&lt;/a&gt;. The &lt;code&gt;/health&lt;/code&gt; endpoint can be accessed for all health checks aggregated into one. However, you typically separate these into liveness and readiness probes. For this reason, &lt;code&gt;/health/live&lt;/code&gt; and &lt;code&gt;/health/ready&lt;/code&gt; endpoints are also automatically provided.&lt;/p&gt; &lt;h3&gt;Persistence&lt;/h3&gt; &lt;p&gt;The core app I put together in the first stage uses an in-memory storage service. This means that the storage is local to each instance of the application and gets wiped when that instance goes down. To build an actual stateless application that can be scaled up and have persistent storage, let’s offload the application state to a MySQL database:&lt;/p&gt; &lt;pre&gt;mvn quarkus:add-extension -Dextensions="hibernate-orm,jdbc-mysql"&lt;/pre&gt; &lt;p&gt;&lt;a href="https://github.com/saharsh-samples/sample-quarkus-app/releases/tag/persistent-storage"&gt;See this tag&lt;/a&gt; (and &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/commit/6912d349c827ceb28b8c5424af7f924d9dd03a93"&gt; commit&lt;/a&gt;) for changes related to persistence. The highlights are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Making zero code changes to switch to persistent mode because &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/java/org/saharsh/samples/quarkus/resources/ValuesResource.java"&gt;my resource class&lt;/a&gt; depends on &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/java/org/saharsh/samples/quarkus/service/StorageService.java"&gt;the &lt;code&gt;StorageService&lt;/code&gt; interface abstraction&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Picking my storage service implementation at runtime lets me introduce three things: &lt;ul&gt; &lt;li&gt;A &lt;code&gt;sample.storage.type&lt;/code&gt; property.&lt;/li&gt; &lt;li&gt;A &lt;code&gt;producer&lt;/code&gt; class to create the right bean based on the property.&lt;/li&gt; &lt;li&gt;A &lt;a target="_blank" rel="nofollow" href="https://javaee.github.io/javaee-spec/javadocs/javax/inject/Qualifier.html"&gt;&lt;code&gt;Qualifier&lt;/code&gt; annotation&lt;/a&gt; (&lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/java/org/saharsh/samples/quarkus/service/ConfiguredStorage.java"&gt;&lt;code&gt;ConfiguredStorage&lt;/code&gt;&lt;/a&gt;) for my resource class to specify that it intends to use the bean produced by the &lt;code&gt;producer&lt;/code&gt; class.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Leveraging &lt;a target="_blank" rel="nofollow" href="https://github.com/saharsh-samples/sample-quarkus-app/blob/master/src/main/resources/application.properties"&gt;the &lt;code&gt;application.properties&lt;/code&gt; pattern&lt;/a&gt; to use in-memory storage as the default storage type.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For this last one, I intend to use &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/config#overriding-properties-at-runtime"&gt; environment variables to override these properties&lt;/a&gt; and switch over to persistent storage. There is one catch, however. Quarkus does much of its configuration and bootstrap at build time. Most properties will then be read and set during the build-time step. To change them, make sure to repackage your application. In my &lt;code&gt;application.properties&lt;/code&gt; file, &lt;code&gt;quarkus.hibernate-orm.dialect&lt;/code&gt;, &lt;code&gt;quarkus.datasource.driver&lt;/code&gt;, and &lt;code&gt;quarkus.datasource.health.enabled&lt;/code&gt; cannot be overridden at runtime. The good news is that the rest can.&lt;/p&gt; &lt;h2&gt;And that’s it&lt;/h2&gt; &lt;p&gt;I have a couple more commits around adding native build support and documentation. However, the application is ready to go. My repo&amp;#8217;s &lt;code&gt;README.md&lt;/code&gt; does a good job of walking through the details of building and running this application locally. You can use the following steps as a reference for running the application on &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;# Create a new project oc new-project samples # Standup MySQL oc new-app --name=valuesdb  mysql-ephemeral \ -p DATABASE_SERVICE_NAME=valuesdb \ -p MYSQL_ROOT_PASSWORD=password \ -p MYSQL_USER=valsuser \ -p MYSQL_PASSWORD=password \ -p MYSQL_DATABASE=valsdb # Create the application schema in MySQL oc rsh valuesdb-1-[pod_id] bash -c "mysql -uvalsuser -ppassword valsdb" mysql&amp;#62; CREATE TABLE vals ( id BIGINT AUTO_INCREMENT PRIMARY KEY, value VARCHAR(255) NOT NULL, date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ); # Create API application from Github repo oc new-app --name valuesapi https://github.com/saharsh-samples/sample-quarkus-app # Expose a route oc expose svc/valuesapi &amp;#38;&amp;#38; oc get routes # To use persistent storage, first create a secret containing DB configuration oc create secret generic valuesapi-properties \ --from-literal=SAMPLE_STORAGE_TYPE=persistent \ --from-literal=QUARKUS_DATASOURCE_URL="jdbc:mysql://valuesdb/valsdb" \ --from-literal=QUARKUS_DATASOURCE_USERNAME=valsuser \ --from-literal=QUARKUS_DATASOURCE_PASSWORD=password # Turn the fields of the secret into environment variables for the API app oc set env dc/valuesapi --from=secret/valuesapi-properties # Add liveness and readiness probes oc set probe dc/valuesapi --liveness --get-url=http://:8080/health/live oc set probe dc/valuesapi --readiness --get-url=http://:8080/health/ready&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Quarkus is an exciting new development in the Java ecosystem. I will make sure to share more articles and code as I explore Quarkus in relation to serverless architecture, reactive programming, and Kafka. In the meantime, check out the following links to dig deeper:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt; Official Quarkus website &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/quarkusio/quarkus"&gt; Official Quarkus GitHub &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/faq/"&gt; Quarkus FAQ &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.graalvm.org/docs/why-graal/"&gt; Why GraalVM? &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#38;linkname=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Framp-up-on-quarkus-a-kubernetes-native-java-framework%2F&amp;#038;title=Ramp%20up%20on%20Quarkus%3A%20A%20Kubernetes-native%20Java%20framework" data-a2a-url="https://developers.redhat.com/blog/2020/04/24/ramp-up-on-quarkus-a-kubernetes-native-java-framework/" data-a2a-title="Ramp up on Quarkus: A Kubernetes-native Java framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/24/ramp-up-on-quarkus-a-kubernetes-native-java-framework/"&gt;Ramp up on Quarkus: A Kubernetes-native Java framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/P6f4Z5u-IVg" height="1" width="1" alt=""/&gt;</content><summary>Java has been in a bit of an awkward spot since containers took off a few years ago. In the world of Kubernetes, microservices, and serverless, it has been getting harder and harder to ignore that Java applications are, by today’s standards, bloated. Well, until now. In this article, I explore the basics of Quarkus, a Kubernetes-native Java framework built to specifically address Java’s bloatednes...</summary><dc:creator>Saharsh Singh</dc:creator><dc:date>2020-04-24T07:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/24/ramp-up-on-quarkus-a-kubernetes-native-java-framework/</feedburner:origLink></entry><entry><title>Build and deploy a serverless app with Camel K and Red Hat OpenShift Serverless 1.5.0 Tech Preview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/u4cEiwe0J60/" /><category term="Camel K" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="serverless application" scheme="searchisko:content:tags" /><author><name>Shailendra Kumar Singh</name></author><id>searchisko:content:id:jbossorg_blog-build_and_deploy_a_serverless_app_with_camel_k_and_red_hat_openshift_serverless_1_5_0_tech_preview</id><updated>2020-04-24T07:00:29Z</updated><published>2020-04-24T07:00:29Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/learn/topics/serverless"&gt;Red Hat OpenShift Serverless&lt;/a&gt; 1.5.0 (currently in tech preview) runs on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; 4.3. It enables &lt;a href="https://developers.redhat.com/blog/2020/04/08/why-kubernetes-native-instead-of-cloud-native/"&gt;stateful, stateless, and serverless workloads&lt;/a&gt; to all operate on a single multi-cloud container platform. &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/"&gt;Apache Camel K&lt;/a&gt; is a lightweight integration platform that runs natively on Kubernetes. Camel K has serverless superpowers.&lt;/p&gt; &lt;p&gt;In this article, I will show you how to use OpenShift Serverless and Camel K to create a serverless Java application that you can scale up or down on demand.&lt;/p&gt; &lt;p&gt;&lt;span id="more-698357"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;The following three technologies need to be installed before beginning this exercise:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/architecture/architecture-installation.html"&gt;Red Hat OpenShift Container Platform 4.3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.openshift.com/container-platform/4.3/serverless/serverless-release-notes.html"&gt;Red Hat OpenShift Serverless 1.5.0 Tech Preview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel-k/releases"&gt;Apache Camel K Operator 1.0.0 RC1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Other technologies used&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/"&gt;Knative Serving&lt;/a&gt; and Kamel (the Camel K CLI tool) will be installed as part of this exercise. Knative Serving on OpenShift Container Platform 4.3 builds on Kubernetes and &lt;a target="_blank" rel="nofollow" href="https://github.com/knative/net-kourier"&gt;Kourier&lt;/a&gt; to support deploying and serving serverless applications. It creates a set of custom resource definitions (CRDs) that are used to define and control the behavior of serverless workloads on an OpenShift cluster.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;kamel&lt;/code&gt; CLI tool interacts with the Camel K integration framework, letting us configure our clusters and run integrations. Together with Knative Serving, this tool helps us build and deploy serverless applications and test our integration. The Kamel CLI will run locally to deploy your Camel route directly onto a Kubernetes or OpenShift cluster.&lt;/p&gt; &lt;h2&gt;Install OpenShift Serverless Operator&lt;/h2&gt; &lt;p&gt;OpenShift Serverless 1.5.0 Tech Preview is compatible with &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.3/architecture/architecture-installation.html"&gt;OpenShift Container Platform (OCP) 4.3&lt;/a&gt;. Assuming that you have OpenShift Container Platform 4.3 in your development environment, navigate to OCP&amp;#8217;s &lt;strong&gt;OperatorHub&lt;/strong&gt; in the web console. Select &lt;strong&gt;OpenShift Serverless Operator&lt;/strong&gt; from the list of available operators, then click &lt;strong&gt;Install&lt;/strong&gt;, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_698367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-698367" class="wp-image-698367 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog1-1024x498.png" alt="A screenshot of the OperatorHub and OpenShiff" width="640" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog1-1024x498.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog1-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog1-768x374.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-698367" class="wp-caption-text"&gt;Figure 1: Select OpenShift Serverless Operator from the list of available operators.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Before we continue, let&amp;#8217;s verify that we&amp;#8217;ve installed OpenShift Serverless Operator:&lt;/p&gt; &lt;pre&gt;$ oc get csv -n openshift-operators &lt;/pre&gt; &lt;p&gt;You should receive the following confirmation:&lt;/p&gt; &lt;pre&gt;NAME DISPLAY VERSION REPLACES PHASE serverless-operator.v1.5.0 OpenShift Serverless Operator 1.5.0 serverless-operator.v1.4.1 Succeeded &lt;/pre&gt; &lt;h2&gt;Install Knative Serving&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll install &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/"&gt;Knative Serving&lt;/a&gt;, which we&amp;#8217;ll use to deploy our serverless application. The &lt;code&gt;serving.yaml&lt;/code&gt; file creates a &lt;code&gt;KnativeServing&lt;/code&gt; object in the &lt;code&gt;knative-serving&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Namespace metadata: name: knative-serving --- apiVersion: operator.knative.dev/v1alpha1 kind: KnativeServing metadata: name: knative-serving namespace: knative-serving &lt;/pre&gt; &lt;p&gt;Enter the following command to apply the object:&lt;/p&gt; &lt;pre&gt;$ oc apply -f serving.yaml namespace/knative-serving created knativeserving.operator.knative.dev/knative-serving created &lt;/pre&gt; &lt;h2&gt;Check for pods&lt;/h2&gt; &lt;p&gt;After you have installed the &lt;code&gt;KnativeServing&lt;/code&gt; object, check for pods in the new &lt;code&gt;knative-serving-ingress&lt;/code&gt; and &lt;code&gt;knative-serving&lt;/code&gt; namespaces:&lt;/p&gt; &lt;pre&gt;$ oc get pods -n knative-serving-ingress &lt;/pre&gt; &lt;p&gt;You should see the following pods created in the &lt;code&gt;knative-serving-ingress&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE 3scale-kourier-control-568f886865-fptx4 1/1 Running 0 27m 3scale-kourier-gateway-785c6bd959-b2t6c 1/1 Running 0 27m &lt;/pre&gt; &lt;p&gt;Now, check the &lt;code&gt;knative-serving&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE activator-7cc6dbf497-4zwdf 1/1 Running 0 27m autoscaler-798cfcd656-gqkdc 1/1 Running 0 27m autoscaler-hpa-5cb5655744-cxff2 1/1 Running 0 27m controller-55c7dd95f6-9qftj 1/1 Running 0 27m webhook-769f994744-mjsrr 1/1 Running 0 27m &lt;/pre&gt; &lt;p&gt;You should also see a new &lt;strong&gt;Serverless&lt;/strong&gt; tab in OpenShift Container Platform&amp;#8217;s &lt;strong&gt;Administrator&lt;/strong&gt; console, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_698437" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-698437" class="wp-image-698437 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog21-1024x483.png" alt="A screenshot of the new Serverless tab in the console." width="640" height="302" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog21-1024x483.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog21-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog21-768x362.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-698437" class="wp-caption-text"&gt;Figure 2. The new Serverless tab in OpenShift Container Platform&amp;#8217;s Administrator console.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Install the Camel K Operator&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll install the Camel K Operator. Start by creating a new project for it:&lt;/p&gt; &lt;pre&gt;$ oc new-project camelknative &lt;/pre&gt; &lt;p&gt;Install the Camel K Operator from OpenShift Container Platform&amp;#8217;s OperatorHub, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_698447" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-698447" class="wp-image-698447 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog3-1024x499.png" alt="A screenshot of the Camel K operator in the OperatorHub." width="640" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog3-1024x499.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog3-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog3-768x374.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-698447" class="wp-caption-text"&gt;Figure 3. Select the Camel K Operator from the OperatorHub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Select the &lt;code&gt;camelknative&lt;/code&gt; namespace, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_698457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-698457" class="wp-image-698457 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog4-1024x494.png" alt="A screenshot of options to configure a new operator namespace." width="640" height="309" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog4-1024x494.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog4-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/blog4-768x370.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-698457" class="wp-caption-text"&gt;Figure 4. Select the camelknative namespace from the Operator Subscription page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Verify the installation status:&lt;/p&gt; &lt;pre&gt;$ oc get csv -n camelknative &lt;/pre&gt; &lt;p&gt;You should get a confirmation that the installation was successful:&lt;/p&gt; &lt;pre&gt;NAME DISPLAY VERSION REPLACES PHASE camel-k-operator.v1.0.0-rc2 Camel K Operator 1.0.0-rc2 camel-k-operator.v1.0.0-rc1 Succeeded &lt;/pre&gt; &lt;p&gt;Before we can continue, we need the &lt;code&gt;kamel&lt;/code&gt; binary, which we&amp;#8217;ll use to configure our cluster and run integrations on it.&lt;/p&gt; &lt;h2&gt;Install kamel&lt;/h2&gt; &lt;p&gt;Check for &lt;a href="https://github.com/apache/camel-k/releases"&gt;the most recent &lt;code&gt;kamel&lt;/code&gt; release here&lt;/a&gt;. Once you&amp;#8217;ve downloaded &lt;code&gt;kamel&lt;/code&gt;, add it to your system path. On Linux, this would be &lt;code&gt;/usr/bin/kamel&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Verify that you installed &lt;code&gt;kamel&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ kamel version Camel K Client 1.0.0-M4 &lt;/pre&gt; &lt;p&gt;Our development environment is complete. Next, we&amp;#8217;ll try out a simple deployment.&lt;/p&gt; &lt;h2&gt;Deploy a Camel route&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll start with a simple route that uses &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/components/latest/undertow-component.html"&gt;Undertow&lt;/a&gt; for its HTTP consumer:&lt;/p&gt; &lt;pre&gt;// Sample.java import org.apache.camel.builder.RouteBuilder; public class Sample extends RouteBuilder { @Override public void configure() throws Exception { from("undertow:http://0.0.0.0:8080/test") .setBody(constant("{{env:CAMEL_SETBODY}}")) .log("Hello Camel-K"); } } &lt;/pre&gt; &lt;p&gt;Run the following to build and deploy the &lt;code&gt;Sample.java&lt;/code&gt; route:&lt;/p&gt; &lt;pre&gt;$ kamel run Sample.java --name sample --dependency camel-undertow --env CAMEL_SETBODY="Response received from POD : {{env:HOSTNAME}}" integration "sample" created &lt;/pre&gt; &lt;h2&gt;Test the integration&lt;/h2&gt; &lt;p&gt;Now we&amp;#8217;ll test our integration. To start, make sure it&amp;#8217;s running:&lt;/p&gt; &lt;pre&gt;$ oc get it&lt;/pre&gt; &lt;p&gt;You should see the following confirmation:&lt;/p&gt; &lt;pre&gt;NAME PHASE KIT REPLICAS sample Running kit-bppjp84iis5hj6nb3vk0 0 &lt;/pre&gt; &lt;p&gt;Next, we call our pods:&lt;/p&gt; &lt;pre&gt;$ oc get pods &lt;/pre&gt; &lt;p&gt;None of the pods has served a request, so the integration is currently scaled to zero:&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE camel-k-kit-bppjp84iis5hj6nb3vk0-1-build 0/1 Completed 0 18m camel-k-operator-775dfccddf-5r7zg 1/1 Running 0 56m &lt;/pre&gt; &lt;pre&gt;$ oc get deployment sample-4srfn-deployment NAME READY UP-TO-DATE AVAILABLE AGE sample-4srfn-deployment 0/0 0 0 8m3s &lt;/pre&gt; &lt;p&gt;When we send a request to the application, it automatically scales to one:&lt;/p&gt; &lt;pre&gt;$ curl http://sample.camelknative.apps.shsinghocp43.lab.com/test Response received from POD : sample-4srfn-deployment-5dfbf746c5-dw8wr &lt;/pre&gt; &lt;p&gt;Call &lt;code&gt;$ oc get pods&lt;/code&gt; again, and you should see the following:&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE camel-k-kit-bppjp84iis5hj6nb3vk0-1-build 0/1 Completed 0 28m camel-k-operator-775dfccddf-5r7zg 1/1 Running 0 66m sample-4srfn-deployment-5dfbf746c5-dw8wr 2/2 Running 0 14s &lt;/pre&gt; &lt;p&gt;The sample integration has scaled to one:&lt;/p&gt; &lt;pre&gt;$ oc get it NAME PHASE KIT REPLICAS sample Running kit-bppjp84iis5hj6nb3vk0 1 &lt;/pre&gt; &lt;pre&gt;$ oc get deployment sample-4srfn-deployment NAME READY UP-TO-DATE AVAILABLE AGE sample-4srfn-deployment 1/1 1 1 14m &lt;/pre&gt; &lt;p&gt;Once a pod is ideal (when no traffic is served by the application), it automatically scales down to zero:&lt;/p&gt; &lt;pre&gt;NAME READY STATUS RESTARTS AGE camel-k-kit-bppjp84iis5hj6nb3vk0-1-build 0/1 Completed 0 31m camel-k-operator-775dfccddf-5r7zg 1/1 Running 0 69m &lt;/pre&gt; &lt;pre&gt;$ oc get it NAME PHASE KIT REPLICAS sample Running kit-bppjp84iis5hj6nb3vk0 0 &lt;/pre&gt; &lt;h2&gt;Delete the application&lt;/h2&gt; &lt;p&gt;When you&amp;#8217;re done testing the integration, you can use &lt;code&gt;kamel&lt;/code&gt; to delete the simple route we created with Camel K:&lt;/p&gt; &lt;pre&gt;$ kamel delete sample Integration sample deleted &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope this article has given you a quick start on developing serverless applications with OpenShift Serverless and Camel K. Note again that &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/announcing-openshift-serverless-1-5-0-tech-preview-a-sneak-peek-of-our-ga"&gt;Red Hat OpenShift Serverless 1.5.0&lt;/a&gt; is currently in tech preview.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#38;linkname=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fbuild-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview%2F&amp;#038;title=Build%20and%20deploy%20a%20serverless%20app%20with%20Camel%20K%20and%20Red%20Hat%20OpenShift%20Serverless%201.5.0%20Tech%20Preview" data-a2a-url="https://developers.redhat.com/blog/2020/04/24/build-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview/" data-a2a-title="Build and deploy a serverless app with Camel K and Red Hat OpenShift Serverless 1.5.0 Tech Preview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/24/build-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview/"&gt;Build and deploy a serverless app with Camel K and Red Hat OpenShift Serverless 1.5.0 Tech Preview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/u4cEiwe0J60" height="1" width="1" alt=""/&gt;</content><summary>Red Hat OpenShift Serverless 1.5.0 (currently in tech preview) runs on Red Hat OpenShift Container Platform 4.3. It enables stateful, stateless, and serverless workloads to all operate on a single multi-cloud container platform. Apache Camel K is a lightweight integration platform that runs natively on Kubernetes. Camel K has serverless superpowers. In this article, I will show you how to use Open...</summary><dc:creator>Shailendra Kumar Singh</dc:creator><dc:date>2020-04-24T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/24/build-and-deploy-a-serverless-app-with-camel-k-and-red-hat-openshift-serverless-1-5-0-tech-preview/</feedburner:origLink></entry><entry><title>MicroProfile 3.3 now available on Open Liberty 20.0.0.4, brings updated features, yum/apt-get support, pattern tracking</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lGdvJDkKkGM/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="grafana" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Open Liberty" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="Rest API" scheme="searchisko:content:tags" /><author><name>Yasmin.Aumeeruddy</name></author><id>searchisko:content:id:jbossorg_blog-microprofile_3_3_now_available_on_open_liberty_20_0_0_4_brings_updated_features_yum_apt_get_support_pattern_tracking</id><updated>2020-04-24T07:00:22Z</updated><published>2020-04-24T07:00:22Z</published><content type="html">&lt;p&gt;Open Liberty 20.0.0.4 provides support for MicroProfile 3.3 which includes updates to MicroProfile Rest Client, Fault Tolerance, Metrics, Health, and Config. Improved developer experience is also achieved with support for yum/apt-get installs and the ability to track use patterns with JAX-RS 2.1.&lt;/p&gt; &lt;p&gt;The updates for &lt;a href="https://openliberty.io/about" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Open Liberty&lt;/a&gt; 20.0.0.4 include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#mp3"&gt;MicroProfile 3.3&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#mpr"&gt;Determine HTTP headers on outgoing requests easily (MicroProfile Rest Client 1.4)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#mra"&gt;Monitor microservice applications (MicroProfile Metrics 2.3)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#hcp"&gt;Provide health check procedures (MicroProfile Health 2.2)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#mfm"&gt;Monitor faults in your microservices (MicroProfile Fault Tolerance 2.1)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#conf"&gt;Configure &lt;/a&gt;&lt;a href="#conf"&gt;your microservices&lt;/a&gt;&lt;a href="#conf"&gt; externally (MicroProfile Config 1.4)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="#jax"&gt;Track usage patterns and performance of services (JAX-RS 2.1)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#yum"&gt;Support for yum/apt-get installations&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#acr"&gt;Automatically compress HTTP responses&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#gra"&gt;Open Liberty Grafana dashboard now available at grafana.com&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#os"&gt;Support OpenShift service account credentials for authentication&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;View the list of fixed bugs in &lt;a href="https://github.com/OpenLiberty/open-liberty/issues?q=label%3Arelease%3A20004+label%3A%22release+bug%22+" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;20.0.0.4&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="run"&gt;Run your applications using 20.0.0.4&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a href="https://openliberty.io//guides/maven-intro.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Maven&lt;/a&gt;, here are the coordinates:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.4&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;p&gt;Or for &lt;a href="https://openliberty.io//guides/gradle-intro.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Gradle&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.4,)' }&lt;/pre&gt; &lt;p&gt;Or if you&amp;#8217;re building an image:&lt;/p&gt; &lt;pre&gt;FROM open-liberty&lt;/pre&gt; &lt;h2 id="mp3"&gt;MicroProfile 3.3 support&lt;/h2&gt; &lt;p&gt;MicroProfile 3.3 improves developer experience with updates to the Rest Client, Fault Tolerance, Metrics, Health, and Config features.&lt;/p&gt; &lt;h3&gt;Determine HTTP headers on outgoing requests (MicroProfile Rest Client 1.4)&lt;/h3&gt; &lt;p&gt;MicroProfile Rest Client 1.4 adds injection into &lt;code&gt;ClientHeadersFactory&lt;/code&gt; instances. When executing a Rest Client inside a JAX-RS request, it can be useful to pull data from the JAX-RS request&amp;#8217;s context or from CDI in order to determine which HTTP headers to send on the outgoing request. With MicroProfile Rest Client 1.4, this is now possible.&lt;/p&gt; &lt;p&gt;To enable MicroProfile Rest Client 1.4, add this feature to your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;mpRestClient-1.4&lt;/pre&gt; &lt;p&gt;CDI and JAX-RS injection into your &lt;code&gt;ClientHeadersFactory&lt;/code&gt; helps you to do things like this:&lt;/p&gt; &lt;pre&gt;&amp;#62;@ApplicationScoped public class MyCustomClientHeadersFactory implements ClientHeadersFactory { @Context private UriInfo uriInfo; @Inject private Foo foo; @Override public MultivaluedMap &amp;#60;String, String&amp;#62; update(MultivaluedMap&amp;#60;String, String&amp;#62; incomingHeaders MultivaluedMap&amp;#60;String, String&amp;#62; clientOutgoingHeaders) { MultivaluedMap&amp;#60;String, String&amp;#62; myHeaders = new MultivaluedHashMap&amp;#60;&amp;#62;(); myHeaders.putSingle("X-HEADER_FROM_CUSTOM_CLIENTHEADERSFACTORY", "456"); URI uri = uriInfo.getAbsolutePath(); myHeaders.putSingle("X-INJECTED_URI_INFO", uri == null ? "null" : uri.toString()); myHeaders.putSingle("X-INJECTED_FOO", foo.getWord()); return myHeaders; } }&lt;/pre&gt; &lt;p&gt;&lt;a href="https://openliberty.io/guides/microprofile-rest-client.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Learn more about the MicroProfile Rest Client here&lt;/a&gt;.&lt;/p&gt; &lt;h3 id="mra"&gt;Track REST resource use with Simple Timer metric and runtime (MicroProfile Metrics 2.3)&lt;/h3&gt; &lt;p&gt;MicroProfile Metrics 2.3 introduces a new metric type called a Simple Timer (annotated with &lt;code&gt;@SimplyTimed&lt;/code&gt;) and runtime provided metrics that track microservice application REST resource method usage and is backed by the new Simple Timer metric. Simple Timer is a lightweight alternative to the existing Timer metric, only tracking the total timing duration and counting the number of times it was invoked. The Timer metric, on the other hand, is performance-heavy and continually calculates duration statistics and throughput statistics resulting in 14 values.&lt;/p&gt; &lt;p&gt;The new REST stat metrics are gathered from REST resource method usage (for example, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;OPTIONS&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, and &lt;code&gt;HEAD&lt;/code&gt;). Simple Timer metric tracks total time duration and total invocation count. This functionality is properly enabled when used in combination with the &lt;code&gt;jaxrs-2.1&lt;/code&gt; feature. All REST stat metrics will use the &lt;code&gt;REST.request&lt;/code&gt; metric name and will be tagged/labeled with their fully qualified class name and method signature.&lt;/p&gt; &lt;p&gt;To enable the feature, include the following in the &lt;code&gt;server.xml&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;mpMetrics-2.3&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;monitor-1.0&lt;/code&gt; feature will be activated with the &lt;code&gt;mpMetrics-2.3&lt;/code&gt; feature. As a result, vendor metrics will be enabled due to the &lt;code&gt;monitor-1.0&lt;/code&gt; activation. To filter out this data you can configure the following into the server.xml to choose the stats you want to see:&lt;/p&gt; &lt;pre&gt;&amp;#60;monitor filter="JVM,ThreadPool,WebContainer,Session,ConnectionPool,REST"/&amp;#62;&lt;/pre&gt; &lt;p&gt;Alternatively, disable all &lt;code&gt;monitor-1.0&lt;/code&gt; stats:&lt;/p&gt; &lt;pre&gt;&amp;#60;monitor filter=“ ”/&amp;#62; &amp;#60;!-- space required --&amp;#62;&lt;/pre&gt; &lt;p&gt;To use the new &lt;code&gt;SimpleTimer&lt;/code&gt; metric programmatically:&lt;/p&gt; &lt;pre&gt;&amp;#62;@Inject MetricRegistry metricRegistry; //create metric Metadata metadata= Metadata.builder().withName("sampleSimpleTimer").build(); SimpleTimer simpleTimer = metricRegistry.simpleTimer(metadata); //retrieve simple timer context (will start timing) SimpleTimer.Context simpleTimerContext = simpleTimer.time() doLogic(); //stops the simple timer from timing simpleTimerContext.close();&lt;/pre&gt; &lt;p&gt;To use the &lt;code&gt;SimpleTimer&lt;/code&gt; metric with annotations:&lt;/p&gt; &lt;pre&gt;&amp;#62;@SimplyTimed(name=“sampleSimpleTimer”) public void doSomething() { doLogic(); }&lt;/pre&gt; &lt;p&gt;Here is the resulting OpenMetrics output:&lt;/p&gt; &lt;pre&gt;# TYPE application_sampleSimpleTimer_total counter application_sampleSimpleTimer_total 12 # TYPE application_sampleSimpleTimer_elapsedTime_seconds gauge application_sampleSimpleTimer_elapsedTime_seconds 12.3200000&lt;/pre&gt; &lt;p&gt;You can enable REST stat metrics with the &lt;code&gt;mpMetrics-2.3&lt;/code&gt; feature by using the following REST resource:&lt;/p&gt; &lt;pre&gt;&amp;#62;package org.eclipse.microprofile.metrics.demo; @ApplicationScoped public class RestDemo { @POST public void postMethod(String... s, Object o){ ... } }&lt;/pre&gt; &lt;p&gt;Regarding REST stat metrics, the &lt;code&gt;OpenMetrics&lt;/code&gt; formatted REST metrics would be:&lt;/p&gt; &lt;pre&gt;# TYPE base_REST_request_total counter base_REST_request_total{class="org.eclipse.microprofile.metrics.demo.RestDemo",method="postMethod_java.lang.String[]_java.lang.Object"} 1 # TYPE base_REST_request_elapsedTime_seconds gauge base_REST_request_elapsedTime_seconds{class="org.eclipse.microprofile.metrics.demo.RestDemo",method="postMethod_java.lang.String[]_java.lang.Object"} 1.000&lt;/pre&gt; &lt;h3 id="hcp"&gt;Provide your own health check procedures (MicroProfile Health 2.2)&lt;/h3&gt; &lt;p&gt;MicroProfile Health Check 2.2 lets you provide your own health check procedures, which are invoked by Open Liberty to verify the health of your microservice. In the &lt;code&gt;mpHealth-2.2&lt;/code&gt; feature, all of the supported Qualifiers (Liveness and Readiness) now have annotation literals added in the specification. These ease programmatic lookup and support for inline instantiation of the qualifiers, which was not supported in the previous versions.&lt;/p&gt; &lt;p&gt;Also, for better integration with third-party frameworks—like the MicroProfile Rest Client—the &lt;code&gt;HealthCheckResponse&lt;/code&gt; class declaration was changed from an abstract class to a concrete class, with constructors allowing for direct instantiation on the consuming end. To enable the feature, include the following in the &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;feature&amp;#62;mpHealth-2.2&amp;#60;/feature&amp;#62;&lt;/pre&gt; &lt;p&gt;Applications are expected to provide health check procedures by implementing the &lt;code&gt;HealthCheck&lt;/code&gt; interface with the &lt;code&gt;@Liveness&lt;/code&gt; or &lt;code&gt;@Readiness&lt;/code&gt; annotations. These annotations are used by Open Liberty to verify the application&amp;#8217;s Liveness or Readiness, respectively. Add your health checks in the &lt;code&gt;call()&lt;/code&gt; method and return the &lt;code&gt;HealthCheckResponse&lt;/code&gt; object, by using the simple &lt;code&gt;up()&lt;/code&gt;/&lt;code&gt;down()&lt;/code&gt; methods from the API:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#62;*Liveness Check* @Liveness @ApplicationScoped public class AppLiveCheck implements HealthCheck { ... @Override public HealthCheckResponse call() { ... HealthCheckResponse.up("myCheck"); ... } }&lt;/pre&gt; &lt;p&gt;To view the status of each health check, access either the &lt;code&gt;http://:/health/live&lt;/code&gt; or &lt;code&gt;http://:/health/ready&lt;/code&gt; endpoints.&lt;/p&gt; &lt;h3 id="mfm"&gt;Monitor faults in your microservices (MicroProfile Fault Tolerance 2.1)&lt;/h3&gt; &lt;p&gt;MicroProfile Fault Tolerance allows developers to easily apply strategies for mitigating failure to their code. It provides annotations that developers can add to methods to use &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/Bulkhead.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;bulkhead&lt;/a&gt;, &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/CircuitBreaker.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;circuit breaker&lt;/a&gt;, &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/Retry.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;retry&lt;/a&gt;, &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/Timeout.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;timeout&lt;/a&gt; and &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/Fallback.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;fallback strategies&lt;/a&gt;. In addition, MicroProfile Fault Tolerance provides an annotation that causes a method to be run &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/org/eclipse/microprofile/faulttolerance/Asynchronous.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;asynchronously&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;MicroProfile Fault Tolerance 2.1:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Adds the new parameters &lt;code&gt;applyOn&lt;/code&gt; and &lt;code&gt;skipOn&lt;/code&gt; to &lt;code&gt;@Fallback&lt;/code&gt;, and adds &lt;code&gt;skipOn&lt;/code&gt; to &lt;code&gt;@CircuitBreaker&lt;/code&gt;, to give the user more control over which exceptions should trigger these strategies. For example:&lt;/li&gt; &lt;/ul&gt; &lt;pre class="aLF-aPX-K0-aPE" style="padding-left: 40px;"&gt;&amp;#62;@Fallback(applyOn=IOException.class, skipOn=FileNotFoundException.class, fallbackMethod="fallbackForService") public String readTheFile() { ... }&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Ensures that the CDI request context is active during the execution of methods annotated with &lt;code&gt;@Asynchronous&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Adds more detail into the Javadoc and makes minor clarifications to the specification.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information on MicroProfile Fault Tolerance:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Get an introduction to MicroProfile Fault Tolerance: &lt;ul&gt; &lt;li&gt;&lt;a href="https://openliberty.io/guides/retry-timeout.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Failing fast and recovering from errors&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://openliberty.io/guides/circuit-breaker.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Preventing repeated failed calls to microservices&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/apidocs/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Reference the Javadoc&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Reference the full specification&lt;/a&gt; including the &lt;a href="https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#release_notes_21" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;2.1 release notes&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/OpenLiberty/open-liberty" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Report any issues on Github&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="conf"&gt;Configure your microservices externally with updated converters (MicroProfile Config 1.4)&lt;/h3&gt; &lt;p&gt;The MicroProfile Config 1.4 feature provides an implementation of the Eclipse MicroProfile Config 1.4 API, which mainly had changes to the built-in and implicit converters. The Open Liberty implementation already supported &lt;code&gt;byte&lt;/code&gt;/&lt;code&gt;Byte&lt;/code&gt; and &lt;code&gt;short&lt;/code&gt;/&lt;code&gt;Short&lt;/code&gt;, but &lt;code&gt;char&lt;/code&gt;/&lt;code&gt;Character&lt;/code&gt; has now been added.&lt;/p&gt; &lt;p&gt;If we have the following properties available in a &lt;code&gt;ConfigSource&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;byte1=128 short1=5 char1=\u00F6&lt;/pre&gt; &lt;p&gt;You can inject those properties into your application, either as primitives or as their boxed equivalents:&lt;/p&gt; &lt;pre&gt;&amp;#62;@Dependent public class MyBean { @Inject @ConfigProperty(name = "byte1") private Byte property1; @Inject @ConfigProperty(name = "byte1") private byte property2; @Inject @ConfigProperty(name = "short1") private Short property3; @Inject @ConfigProperty(name = "short1") private short property4; @Inject @ConfigProperty(name = "char1") private Character property5; @Inject @ConfigProperty(name = "char1") private char property6; }&lt;/pre&gt; &lt;p&gt;To enable the feature, include the following in the &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;feature&amp;#62;mpConfig-1.4&amp;#60;/feature&amp;#62;&lt;/pre&gt; &lt;p&gt;Previously, in MicroProfile Config 1.3, the &lt;code&gt;String&lt;/code&gt; constructor would have been used to do the implicit conversion. In version 1.4, the &lt;code&gt;parse(CharSequence)&lt;/code&gt; method is used instead. Notice that the parse &lt;code&gt;method&lt;/code&gt; uses a simple cache. If the same raw &lt;code&gt;String&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; extends &lt;code&gt;CharSequence&lt;/code&gt;) is converted twice then the same instance of &lt;code&gt;MyType&lt;/code&gt; will be returned. This result would not be possible with a &lt;code&gt;String&lt;/code&gt; constructor.&lt;/p&gt; &lt;p&gt;We have also made a notable internal change to the Open Liberty implementation. In versions prior to 1.4, our implementation included a background update thread that frequently scanned through the available &lt;code&gt;ConfigSources&lt;/code&gt; and cached the results. This behavior made very fast calls to the &lt;code&gt;Config API&lt;/code&gt;. However, because the size and complexity of user-provided &lt;code&gt;ConfigSources&lt;/code&gt; is unknown, this process was a potentially expensive thing to be doing in the background.&lt;/p&gt; &lt;p&gt;The background update thread has been replaced with an expiry process. What this means is that the first request for a property might be a little slower as it might need to go through all of the available &lt;code&gt;ConfigSources&lt;/code&gt; to find a value. Once found, this value is then cached and a timer is started to expire the cache. If a second request is made for that property before the cache expires then the cached value is used and returns quickly.&lt;/p&gt; &lt;p&gt;In order to maintain the same dynamic characteristics of the previous versions, the expiry time is set to only 500ms. This value might be increased by setting the &lt;code&gt;microprofile.config.refresh.rate&lt;/code&gt; system property. A setting of 500ms is the minimum expiry time allowed, but if the property is set to zero or less, then caching is disabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href="https://github.com/eclipse/microprofile-config/milestone/7?closed=1" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;changes to the API since 1.3&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="jax"&gt;Track use patterns and service performance (JAX-RS 2.1)&lt;/h2&gt; &lt;p&gt;The JAX-RS 2.1 auto-feature is enabled whenever the &lt;code&gt;jaxrs-2.0&lt;/code&gt; (or &lt;code&gt;jaxrs-2.1&lt;/code&gt;) features are specified within the &lt;code&gt;server.xml&lt;/code&gt;, along with the &lt;code&gt;monitor-1.0&lt;/code&gt; feature. This auto-feature introduces the ability to collect statistics related to the execution of an application&amp;#8217;s RESTful resource methods (specifically the number of invocations and the cumulative execution time). This data is useful for designing, debugging, and monitoring purposes.&lt;/p&gt; &lt;p&gt;RESTful metrics can be accessed via the &lt;code&gt;monitor-1.0&lt;/code&gt; feature in combination with the &lt;code&gt;mpMetrics-2.3&lt;/code&gt; feature. This information is also accessible via JMX (JConsole, for example). Include the following in the server.xml for JMX/PMI access:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;feature&amp;#62;jaxrs-2.0&amp;#60;/feature&amp;#62; (or jaxrs-2.1) &amp;#60;feature&amp;#62;monitor-1.0&amp;#60;/feature&amp;#62;&lt;/pre&gt; &lt;p&gt;The JMX/PMI data collected is per-method and is aggregated to the class and web-module level. For example, suppose that a server has two web modules, each with identically named classes containing two resource methods. The results for the REST_Stats in Jconsole will look like Figure 1.&lt;/p&gt; &lt;div id="attachment_712497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-712497" class="wp-image-712497 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/JAXRS-Monitor-JConsole-1024x450.png" alt="Jconsole with REST_Stats results displayed" width="640" height="281" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/JAXRS-Monitor-JConsole-1024x450.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/JAXRS-Monitor-JConsole-300x132.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/JAXRS-Monitor-JConsole-768x337.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-712497" class="wp-caption-text"&gt;Figure 1: Examine your RESTful metrics with JAX-RS 2.1.&lt;/p&gt;&lt;/div&gt; &lt;h2 id="yum"&gt;Install OpenLiberty with yum/apt-get&lt;/h2&gt; &lt;p&gt;Open Liberty is now available as a native Linux &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.rpm&lt;/code&gt; package, so you can now use native OS tools (&lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;apt&lt;/code&gt;) to manage your Open Liberty installations. To access Open Liberty &lt;code&gt;rpms&lt;/code&gt;/&lt;code&gt;debs&lt;/code&gt;, you&amp;#8217;ll have to configure your machine to use the Open Liberty repository.&lt;/p&gt; &lt;h3&gt;Configure your machine&lt;/h3&gt; &lt;p&gt;On Ubuntu systems:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Append the following line to &lt;code&gt;file /etc/apt/sources.list&lt;/code&gt;:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ deb https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/os-native-packages/deb/ /&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Add the repository&amp;#8217;s public key with this command:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ wget -O http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/os-native-packages/public.key | sudo apt-key add -&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Run the command:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ sudo apt-get update&lt;/pre&gt; &lt;ol start="4"&gt; &lt;li&gt;Install the latest version of Open Liberty from the repository by running:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ sudo apt-get install openliberty&lt;/pre&gt; &lt;p&gt;On Red Hat Systems, create a file named &lt;code&gt;/etc/yum.repos.d/openliberty.repo&lt;/code&gt; that contains:&lt;/p&gt; &lt;pre&gt;[olrepo] name=olrepo baseurl=http://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/os-native-packages/rpm/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/os-native-packages/public.key&lt;/pre&gt; &lt;p&gt;Then, install the latest version of Open Liberty with:&lt;/p&gt; &lt;pre&gt;$ sudo yum update $ sudo yum install openliberty&lt;/pre&gt; &lt;h3&gt;Use OpenLiberty&lt;/h3&gt; &lt;p&gt;Whether you&amp;#8217;re Ubuntu or Red Hat systems, after the &lt;code&gt;openliberty.rpm&lt;/code&gt; or &lt;code&gt;openliberty.deb&lt;/code&gt; are installed, the empty &lt;code&gt;defaultServer&lt;/code&gt; is created and configured to run as a service. Here are the details:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Open Liberty services will run as user &lt;code&gt;openliberty&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The server is located in &lt;code&gt;/var/lib/openliberty/usr/servers/defaultServer&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Logs will be stored in &lt;code&gt;/var/log/openliberty/defaultServer&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The PID for the server is in &lt;code&gt;/var/run/openliberty/defaultServer.pid&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once this process is complete, you can use the following standard Linux service commands:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;systemctl status openliberty@defaultServer.service&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;systemctl start openliberty@defaultServer.service&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;systemctl restart openliberty@defaultServer.service&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;systemctl stop openliberty@defaultServer.service&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id="acr"&gt;Automatically compress HTTP responses&lt;/h2&gt; &lt;p&gt;You can now try out HTTP response compression. Previous to this feature, Open Liberty only considered compression through the use of the &lt;code&gt;$WSZIP&lt;/code&gt; private header. There was no way for a customer to configure the compression of response messages. Support now mainly consists of using the &lt;code&gt;Accept-Encoding&lt;/code&gt; header in conjunction with the &lt;code&gt;Content-Type&lt;/code&gt; header, which determines whether the response message can be compressed.&lt;/p&gt; &lt;p&gt;This behavior allows the Liberty server to compress response messages when possible, which lets developers use the compression feature to reduce network traffic, therefore reducing bandwidth and decreasing the exchange times between clients and Liberty servers. A new element, &lt;code&gt;compression&lt;/code&gt;, is now available within the &lt;code&gt;httpEndPoint&lt;/code&gt; for a user to opt-in and use compression support.&lt;/p&gt; &lt;p&gt;The optional &lt;code&gt;types&lt;/code&gt; attribute allows the user to configure a comma-delimited list of content types that should or should not be considered for compression. This list supports the use of the plus (+) and minus (-) characters to add (or remove) content types to (and from) the default list. Each content type contains a type and a subtype separated by a slash (/) character. A wild card (*) character can be used as the subtype to indicate all subtypes for a specific type.&lt;/p&gt; &lt;p&gt;The default value of the types optional attribute is &lt;code&gt;text/*, application/javascript&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When configuring the optional &lt;code&gt;serverPreferredAlgorithm&lt;/code&gt; attribute, the configured value is verified against the “Accept-Encoding” header values. If the client accepts the configured value, this is set as the compression algorithm to use. If the client does not accept the configured value, or if the configured value is set to &amp;#8220;none,&amp;#8221; the client-preferred compression algorithm is chosen by default:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;httpEndpoint id="defaultHttpEndpoint" httpPort="9080" httpsPort="9443"&amp;#62; &amp;#60;compression types=“+application/pdf, -text/html” serverPreferredAlgorithm=“gzip”/&amp;#62;&amp;#60;/httpEndpoint&amp;#62;&lt;/pre&gt; &lt;p&gt;Open Liberty supports the following compression algorithms: &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;x-gzip&lt;/code&gt;, &lt;code&gt;deflate&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, and &lt;code&gt;identity&lt;/code&gt; (no compression).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Http Response Compression&lt;/code&gt; functionality was designed from the following &lt;a href="https://github.com/OpenLiberty/open-liberty/issues/7502" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Open Liberty Epic: #7502&lt;/a&gt;. This design is outlined within the Epic for more detailed reading. The basic flow of the design is shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_712477" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/04/ResponseCompression.png"&gt;&lt;img aria-describedby="caption-attachment-712477" class="wp-image-712477" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/ResponseCompression.png" alt="Figure for the design behind Http Response Compression" width="639" height="238" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/ResponseCompression.png 741w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/ResponseCompression-300x112.png 300w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-712477" class="wp-caption-text"&gt;Figure 2: The initial design for Http Response Compression functionality.&lt;/p&gt;&lt;/div&gt; &lt;h3 id="gra"&gt;Open Liberty Grafana dashboard now available at grafana.com&lt;/h3&gt; &lt;p&gt;The Grafana dashboard provides a wide range of MicroProfile Metrics data time-series visualizations, such as CPU, Servlet, Connection Pool, and Garbage Collection metrics. This dashboard is powered by a Prometheus datasource, which is configured to ingest data from one or more Liberty servers&amp;#8217; &lt;code&gt;/metrics&lt;/code&gt; endpoints, enabling us to view the results in Grafana in near real-time.&lt;/p&gt; &lt;p&gt;This new dashboard works with Liberty instances outside of &lt;a href="https://developers.redhat.com/products/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. For Liberty servers running on OpenShift Container Platform, use the &lt;a href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Grafana dashboards published here&lt;/a&gt;. The new Grafana dashboard is intended for Open Liberty servers with &lt;code&gt;mpMetrics-2.x&lt;/code&gt; that are not running on OCP.&lt;/p&gt; &lt;p&gt;You can use this dashboard to spot performance issues when running your applications in Open Liberty. For instance, metrics such as servlet response times, or CPU or heap usage, could be indicative of an underlying performance issue or memory leak when seen as a time-series on Grafana.&lt;/p&gt; &lt;p&gt;To configure the dashboard, first add the &lt;code&gt;mpMetrics-2.3&lt;/code&gt; feature. This will automatically enable the &lt;code&gt;monitor-1.0&lt;/code&gt; feature:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;mpMetrics-2.3&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;mpMetrics authentication="false" /&amp;#62;&lt;/pre&gt; &lt;p&gt;Run the server using the following command:&lt;/p&gt; &lt;pre&gt;$ ./server run DashboardTest&lt;/pre&gt; &lt;p&gt;Then, download &lt;a href="https://prometheus.io/download/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Prometheus&lt;/a&gt;. Once unpackaged, it should contain a startup script called &lt;code&gt;prometheus&lt;/code&gt; alongside a configuration file: &lt;code&gt;prometheus.yml&lt;/code&gt;. Within &lt;code&gt;prometheus.yml&lt;/code&gt;, append one of the following jobs to &lt;code&gt;scrape_configs&lt;/code&gt;, depending on whether you are dealing with a secure endpoint or an insecure one.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;mpMetrics&lt;/code&gt; on an insecure endpoint:&lt;/p&gt; &lt;pre&gt;- job_name: 'liberty' scrape_interval: 5s static_configs: - targets: ['localhost:9080']&lt;/pre&gt; &lt;p&gt;For &lt;code&gt;mpMetrics&lt;/code&gt; on a secure endpoint:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;- job_name: 'liberty-secure' scrape_interval: 5s static_configs: - targets: ['localhost:9443'] basic_auth: username: "&amp;#60;your-username&amp;#62;" password: "&amp;#60;your-password&amp;#62;" tls_config: insecure_skip_verify: true scheme: "https"&lt;/pre&gt; &lt;p&gt;Start the &lt;code&gt;prometheus&lt;/code&gt; script and visit &lt;code&gt;http://localhost:9090/targets&lt;/code&gt;, where you should see your Open Liberty server listed as one of the targets as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_711557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-711557" class="wp-image-711557 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-prometheus-1-1-1024x166.png" alt="Prometheus showing the results of running the script " width="640" height="104" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-prometheus-1-1-1024x166.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-prometheus-1-1-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-prometheus-1-1-768x124.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-711557" class="wp-caption-text"&gt;Figure 3: The prometheus script can show you all of your targets.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, download &lt;a href="https://grafana.com/docs/grafana/latest/installation/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Grafana&lt;/a&gt;, and once finished, visit &lt;code&gt;https://localhost:3000&lt;/code&gt;. When you have navigated to Grafana, click the gear icon and select &lt;strong&gt;Data Source&lt;/strong&gt;. Add a new Prometheus datasource with the URL &lt;code&gt;http://localhost:9090&lt;/code&gt;, and then click &lt;strong&gt;Save &amp;#38; Test&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;To import the dashboard:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Click the plus icon.&lt;/li&gt; &lt;li&gt;Select &lt;strong&gt;Import&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Paste the dashboard ID 11706.&lt;/li&gt; &lt;li&gt;When prompted in the dropdown menu, link it to the new data source you have just created.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_711537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-711537" class="wp-image-711537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-grafana-1-1024x591.png" alt="Open Liberty displaying your MicroProfile Metrics dashboard" width="640" height="369" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-grafana-1-1024x591.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-grafana-1-300x173.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/20004-grafana-1-768x443.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-711537" class="wp-caption-text"&gt;Figure 4: Your new MicroProfile Metrics dashboard now appears in Open Liberty.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For more information, check out &lt;a href="https://grafana.com/grafana/dashboards/11706" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;the dashboard found on Grafana&amp;#8217;s website&lt;/a&gt; and &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Using Prometheus to create your own custom visualizations&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Support for Red Hat OpenShift service account authentication credentials&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;socialLogin-1.0&lt;/code&gt; feature can now be configured to use &lt;a target="_blank" rel="nofollow" href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; service accounts to authenticate and authorize protected resource requests. This option allows server administrators to secure, for example, monitoring and metrics endpoints that might produce sensitive information but require repeated access by an automated process or non-human entity. The new behavior allows service accounts to authenticate themselves by providing in the request a service account token that was created within the OpenShift cluster.&lt;/p&gt; &lt;p&gt;A new configuration element is now provided to support this behavior. The &lt;code&gt;socialLogin-1.0&lt;/code&gt; feature must be enabled to gain access to this new element. The minimum configuration requires only that an element be specified in the &lt;code&gt;server xml&lt;/code&gt;:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;server&amp;#62; &amp;#60;!-- Enable features --&amp;#62; &amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;appSecurity-3.0&amp;#60;/feature&amp;#62; &amp;#60;feature&amp;#62;socialLogin-1.0&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;okdServiceLogin /&amp;#62; &amp;#60;/server&amp;#62;&lt;/pre&gt; &lt;p&gt;The minimum configuration assumes that the Liberty server is packaged and deployed within an OpenShift cluster. By default, the element will be used to authenticate all protected resource requests that the Liberty server receives.&lt;/p&gt; &lt;p&gt;Incoming requests to protected resources must include a service account token. The token must be specified as a bearer token in the request&amp;#8217;s &lt;code&gt;Authorization&lt;/code&gt; header. The Liberty server will use the service account token to query information about the associated service account from the OpenShift cluster. The OpenShift project that the service account is in will be used as the group for the service account when making authorization decisions. The OpenShift project name is concatenated with the name of the service account to create the username.&lt;/p&gt; &lt;p&gt;If the Liberty server is not deployed within an OpenShift cluster, the &lt;code&gt;userValidationApi&lt;/code&gt; attribute should be configured and set to the value for the appropriate User API endpoint in the OpenShift cluster:&lt;/p&gt; &lt;pre class="aLF-aPX-K0-aPE"&gt;&amp;#60;okdServiceLogin userValidationApi="https://cluster.domain.example.com/apis/user.openshift.io/v1/users/~" /&amp;#62;&lt;/pre&gt; &lt;p&gt;Multiple elements can be configured as long as each element has a unique &lt;code&gt;id&lt;/code&gt; attribute specified. In those cases, authentication filters should also be configured to ensure the appropriate endpoints are protected by a unique instance.&lt;/p&gt; &lt;p&gt;More information about OpenShift service accounts can be found in the OpenShift documentation for &lt;a href="https://docs.openshift.com/container-platform/4.3/authentication/understanding-and-creating-service-accounts.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Understanding and creating service accounts.&lt;/a&gt;&lt;/p&gt; &lt;h2 id="_get_liberty_20_0_0_4_now"&gt;Get Liberty 20.0.0.4 now&lt;/h2&gt; &lt;p&gt;Open Liberty 20.0.0.4 is available through &lt;a href="#run"&gt;Maven, Gradle, Docker, and as a downloadable archive&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Try Open Liberty 20.0.0.4 in Red Hat Runtimes now&lt;/h2&gt; &lt;p&gt;Open Liberty is part of the Red Hat Runtimes offering and is available to &lt;a href="https://access.redhat.com/products/red-hat-runtimes" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Red Hat Runtimes subscribers&lt;/a&gt;. To learn more about deploying Open Liberty applications to OpenShift, take a look at our &lt;a href="https://openliberty.io/guides/cloud-openshift.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Open Liberty guide: Deploying microservices to OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#38;linkname=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F24%2Fmicroprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking%2F&amp;#038;title=MicroProfile%203.3%20now%20available%20on%20Open%20Liberty%2020.0.0.4%2C%20brings%20updated%20features%2C%20yum%2Fapt-get%20support%2C%20pattern%20tracking" data-a2a-url="https://developers.redhat.com/blog/2020/04/24/microprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking/" data-a2a-title="MicroProfile 3.3 now available on Open Liberty 20.0.0.4, brings updated features, yum/apt-get support, pattern tracking"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/24/microprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking/"&gt;MicroProfile 3.3 now available on Open Liberty 20.0.0.4, brings updated features, yum/apt-get support, pattern tracking&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lGdvJDkKkGM" height="1" width="1" alt=""/&gt;</content><summary>Open Liberty 20.0.0.4 provides support for MicroProfile 3.3 which includes updates to MicroProfile Rest Client, Fault Tolerance, Metrics, Health, and Config. Improved developer experience is also achieved with support for yum/apt-get installs and the ability to track use patterns with JAX-RS 2.1. The updates for Open Liberty 20.0.0.4 include: MicroProfile 3.3 Determine HTTP headers on outgoing req...</summary><dc:creator>Yasmin.Aumeeruddy</dc:creator><dc:date>2020-04-24T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/24/microprofile-3-3-now-available-on-open-liberty-20-0-0-4-brings-updated-features-yum-apt-get-support-pattern-tracking/</feedburner:origLink></entry><entry><title>Demystifying the Event Driven Architecture - An introduction (part 1)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-f3dD75VP28/demystifying-event-driven-architecture-an-introduction.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-demystifying_the_event_driven_architecture_an_introduction_part_1</id><updated>2020-04-24T10:22:27Z</updated><published>2020-04-24T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://lh5.googleusercontent.com/EuqLEth52HaU_GHf0PMqUi76UirdI2kVBnjKp09DmqRTD89QUujXW7n8amsv8cFDxbxiDd4wddbuOVxh0PuaE6x0BJvi8OdrjyKmkgGMh_H1SRuwhZDCGKH0nSyV6VTrvVWrs67s" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="demystifying event driven architecture" border="0" height="211" src="https://lh5.googleusercontent.com/EuqLEth52HaU_GHf0PMqUi76UirdI2kVBnjKp09DmqRTD89QUujXW7n8amsv8cFDxbxiDd4wddbuOVxh0PuaE6x0BJvi8OdrjyKmkgGMh_H1SRuwhZDCGKH0nSyV6VTrvVWrs67s" style="font-size: 12pt; margin-top: 0px;" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;span style="color: #cccccc;"&gt;(Photo royalty free: Pikrepo.com)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape?&lt;br /&gt;&lt;br /&gt;Search no further.&lt;br /&gt;&lt;br /&gt;This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event Driven Architecture (EDA). It’s a central story to organizations moving forward into the digital world and is worth exploring as part of your strategy for continued success.&lt;br /&gt;&lt;br /&gt;We’ll discuss if EDA might be the best choice for your microservice integration solutions, and more importantly, when you might not need EDA at all. There will be a tour of use cases that lend themselves to EDA solutions and present a few real world examples for your consideration. Lastly, we’ll look at the open technologies that can help you to implement an EDA architecture.&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The basics&lt;/h3&gt;Before we examine the question of whether to use EDA or not, let’s examine what we are talking about first. EDA is an approach to develop applications in order to maximize the benefits of microservices. Simply put, EDA is a software development method for building applications that asynchronously communicate or integrate with other applications and systems via events.&lt;br /&gt;&lt;br /&gt;Events are used as a way of establishing communication between applications, as well as with systems. This is called &lt;i&gt;integration&lt;/i&gt;. An event can be any occurrence or change in state that is identified by the application. A good example of an event is the addition of a product to a shopping cart on an ecommerce site. An application designated as a &lt;i&gt;Producer&lt;/i&gt; detects the event and sends out relevant data in the form of a message. The middleman, an &lt;i&gt;Event Processor&lt;/i&gt;, directs the message to an application designated as a &lt;i&gt;Consumer&lt;/i&gt;, which receives the message. Multiple consumers can receive the same message and utilize or even process the associated data in their own way, to accomplish the specific job for which the application is designed.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://lh4.googleusercontent.com/DUBbw0O5gHfXy-fmWJisUYOTaro-L-K083BKoGYwQZ04DYHSkGYdJRZItCkg-SfprNV05YqRTpez-K8fIwiZhZUPuAZI1lTwyXd8oyTZkSAszfaWduXl9w8Wr49O8PqLOx3dHO9t" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="event driven architecture" border="0" height="311" src="https://lh4.googleusercontent.com/DUBbw0O5gHfXy-fmWJisUYOTaro-L-K083BKoGYwQZ04DYHSkGYdJRZItCkg-SfprNV05YqRTpez-K8fIwiZhZUPuAZI1lTwyXd8oyTZkSAszfaWduXl9w8Wr49O8PqLOx3dHO9t" style="margin-top: 0px;" title="" width="243" /&gt;&lt;/a&gt;EDA's &lt;i&gt;asynchronous&lt;/i&gt; event-based communication differs from &lt;i&gt;synchronous&lt;/i&gt; communication in which two applications make a direct connection, most commonly via application programming interfaces (APIs). Conversely, &lt;i&gt;asynchronous&lt;/i&gt; communication is event-driven, allowing multiple applications to communicate simultaneously and rapidly, in real time. EDA is considered the best way to enable asynchronous event-driven application interaction.&lt;br /&gt;&lt;br /&gt;Today's development model relies on revolutionary technologies—like microservices and cloud-native development—that make distributed systems and applications possible. &lt;i&gt;Distributed&lt;/i&gt; means the system or application is built from components physically located in different places. The secret to making distributed computing work is good solid communication between these components&lt;br /&gt;&lt;br /&gt;Traditional synchronous architecture cannot handle the performance and scale needs of&amp;nbsp; distributed systems, and consequently applications based on this more conventional architecture face debilitating challenges in a distributed environment, including communication latency, system degradation, unpredictable failures, and more. Moving to EDA helps developers overcome these challenges. EDA requires minimal coupling between the services, while they can still communicate with each other, which makes EDA optimal for modern, distributed applications.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;To EDA or not&lt;/h3&gt;In the next article, we’ll explore a list of cases that lend themselves explicitly to implementing an EDA solution. Now we’re going to look at a few reasons where it might make sense to pass on EDA solutions.&lt;br /&gt;&lt;br /&gt;One of the first things you learn and read a lot about is how EDA means loose coupling between everything in your architecture. Microservices don’t need to know about each other, systems don’t need to know about each other, and applications don’t need to know about each other. While this is often a strong guiding force when implementing EDA, some projects lend themselves to being designed as tightly coupled. If your application landscape is such that you desire to process data at higher volumes and need to have a single point of truth (for example, a database) for that data, then EDA would not be for you.&lt;br /&gt;&lt;br /&gt;If your applications and interactions with your users does not require real-time or near real-time responses, then events and EDA are not a necessity for your solution. Real-time solutions are highly dependent on processing events, often at high volume, with as much speed as possible. Not all applications are in need of real-time responses.&lt;br /&gt;&lt;br /&gt;There is a vast amount of complexity in EDA architectures, which becomes a double edged sword. This means trading off the ability to react to large event volumes at near real-time speed with complexity as you strive to understand or trace problems as they happen in that architecture. If your current resource team is not up to the task of asynchronous debugging problems, it might not be the best solution path to take with regards to EDA.&lt;br /&gt;&lt;br /&gt;This is not a complete listing of all reasons to not use EDA, but gives you an impression of the various possible reasons to use an EDA, or not.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What’s next?&lt;/h3&gt;Now that you have an introduction to the world of EDA, we’ll continue in the next article by exploring the use cases that do lend themselves to an EDA solution.&lt;br /&gt;&lt;br /&gt;If you’re interested in exploring EDA solutions using open source technologies, then take a look at &lt;br /&gt;&lt;a href="https://www.redhat.com/en/events/webinar/getting-started-event-driven-architecture-using-apache-kafka" style="text-decoration-line: none;" target="_blank"&gt;getting started with event-driven architecture using Apache Kafka&lt;/a&gt; or this free e-book on &lt;a href="https://www.redhat.com/en/resources/event-driven-applications-amq-streams-analyst-paper" style="text-decoration-line: none;" target="_blank"&gt;designing event-driven applications&lt;/a&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=a6jetYDwvUA:bwBoqZZXZec:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=a6jetYDwvUA:bwBoqZZXZec:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=a6jetYDwvUA:bwBoqZZXZec:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=a6jetYDwvUA:bwBoqZZXZec:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=a6jetYDwvUA:bwBoqZZXZec:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/a6jetYDwvUA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-f3dD75VP28" height="1" width="1" alt=""/&gt;</content><summary>(Photo royalty free: Pikrepo.com)High throughput, resiliency, scalability and speed—are you searching for a way to leverage microservice integration to handle all the event-driven communications in your growing architecture landscape? Search no further. This series of articles guides you through the world of integration using microservice architecture and specifically explores the world of Event D...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-04-24T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/a6jetYDwvUA/demystifying-event-driven-architecture-an-introduction.html</feedburner:origLink></entry><entry><title>Six reasons why you will love Camel K</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iXWVV3k9Qms/six-reasons-why-you-will-love-camel-k.html" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_christinalineng" scheme="searchisko:content:tags" /><author><name>CHRISTINA の J老闆</name></author><id>searchisko:content:id:jbossorg_blog-six_reasons_why_you_will_love_camel_k</id><updated>2020-04-23T12:30:09Z</updated><published>2020-04-23T12:30:00Z</published><content type="html">&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;a href="https://arabiconline.eu/wp-content/uploads/2017/08/photo-960x675.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Camels and beauty - ARABIC ONLINE" border="0" height="140" src="https://arabiconline.eu/wp-content/uploads/2017/08/photo-960x675.jpg" width="200" /&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Camel K, a project under the famous Apache Camel project. This project&lt;/span&gt;&lt;span style="font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; white-space: pre-wrap;"&gt; totally change the way developers work with Kubernetes/OpenShift cloud platforms. By automating the nasty configuration and loads of prep work from developers.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b id="docs-internal-guid-66e7101c-7fff-0557-ddd8-92d06e8800ba" style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;If you are an old time developer like me. I did my best slowly trying to adapt the latest and greatest cloud native “ecology”. It’s not difficult, but with small things and traps here and there. I’ll tell yel’ it's not a smooth ride. It’s understandable for emerging technologies. But with the large adoption of cloud, I see it’s reaching a level of maturity, where now we are thinking of how to make things go faster, as well as making it more accessible to the larger audience.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;And here is why you will love &lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt;..&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Real-time coding on the platform&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;When a developer wants to publish their application onto a Kubernetes/OpenShift Platform, they need to first build the app. And containerized the app to have a working image. Then pushing the image to the platform to run.&amp;nbsp; If the developer is trying to debug or develop the app with some changes, sorry, go back to square one and build it again. The worst nightmare for developers is the wait. It’s time consuming, and breaks the chain of thoughts.&amp;nbsp; Camel K eliminates the painstaking process. Let developers quickly update apps they are building on the platform immediately. By layering the image build on cloud, and streaming the code efficiently with the Camel K operator.&lt;/span&gt;&lt;/div&gt;&lt;a href="http://4.bp.blogspot.com/-0TOeD-sSrew/XqBUHA-lHzI/AAAAAAAAGGY/z0hhgYBm7xspODQOJ2Vmv5VtHc1WDdXXgCK4BGAYYCw/s1600/6reasons.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="265" src="https://4.bp.blogspot.com/-0TOeD-sSrew/XqBUHA-lHzI/AAAAAAAAGGY/z0hhgYBm7xspODQOJ2Vmv5VtHc1WDdXXgCK4BGAYYCw/s400/6reasons.png" width="400" /&gt;&lt;/a&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Natively on cloud&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt; is smart to discover the surrounding platform resources required to run on the platform. For instance, if a developer exposes a HTTP endpoint in the app, Camel K will know to create a related service and route in the platform. Another example is the cron jobs, where Camel K configures it for developers when it sees the behaviour in the code. Configurations are also taken care of for developers with Camel K convert the properties files into Kubernetes resources too. Reversing it is also simple. Simply remove the app, and Camel K will delete the related resource.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;No more dependency hell&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Dependency is troublesome, annoying things to a developer. It’s not a big deal in the monolithic world, it probably imported everything in the world already from prior projects. (Let’s not talk about the redundancy, wasted resource and version conflicts). When writing a 20 lines small microservice or function, it doesn’t make sense for a developer to write a 50 line dependency definition.&amp;nbsp; &lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt; will smartly pick up the dependencies needed to run the app, it will automatically locate the libraries when building. But also give developers the choice to load any specific libraries they need as well.&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Freedom to choose the language and runtime&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt; supports range of languages for developers, no matter if it’s Java or scripting languages like Groovy or Javascript to &lt;/span&gt;&lt;span style="background-color: white; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;markup languages&lt;/span&gt;&lt;span style="background-color: white; color: #3c4043; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;like XML or YAML. Camel K no longer needs a big fat framework like Springboot to run. Depending on the types of application, developers can choose to&amp;nbsp; run simple plain small Java Main in their microservice. Or go with the latest and greatest Quarkus with fast boot up time for serverless apps. Running the runtime requires literally just &lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: italic; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;ONE&lt;/span&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt; configuration. “-t quarkus.enabled=true”&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Simple, Small but Powerful&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;If we look closely at Camel K app, the core is from Apache Camel.&amp;nbsp; This means developers will have well established patterns to reuse. Pre-built transformation for data and 300+ components available for quick connectivity. No more reinventing the wheel. So the code is cleaner, easier to maintain, but also maintains highly customizable freedom for users.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Serverless made easy&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Reduce the operation, development and scaling cost. KNative is the most popular serverless frameworks on Kubernetes. It introduces the idea of scaling to zero, scaling up for load. And also serving the new specification for future &lt;/span&gt;&lt;a href="https://github.com/cloudevents/spec" style="text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;Cloud Events&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;. Applying these serverless capabilities to an app on the cloud requires a set of configuration. But with Camel K it will automatically do it and make it seamless for developer trying to access the channel to get the cloud events.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Check out this video I made a couple of months ago on Camel K. A 1000 feet high overview of what Camel K is. And also the getting started series I made for Camel K.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/LaBvBonUC6g/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/LaBvBonUC6g?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; color: black; font-family: &amp;quot;red hat display&amp;quot; , sans-serif; font-size: 11pt; font-style: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;Lastly, choose the right tools for your projects. &lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt; may not be a silver bullet that magically solves all your problems. But it’s definitely worth your time to see how dramatically it is going to change the way you code on Cloud platform! &lt;/span&gt;&lt;/div&gt;&lt;br class="Apple-interchange-newline" /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hFXzh/~4/9n5BRh610Cg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iXWVV3k9Qms" height="1" width="1" alt=""/&gt;</content><summary>Camel K, a project under the famous Apache Camel project. This project totally change the way developers work with Kubernetes/OpenShift cloud platforms. By automating the nasty configuration and loads of prep work from developers.  If you are an old time developer like me. I did my best slowly trying to adapt the latest and greatest cloud native “ecology”. It’s not difficult, but with small things...</summary><dc:creator>CHRISTINA の J老闆</dc:creator><dc:date>2020-04-23T12:30:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/blogspot/hFXzh/~3/9n5BRh610Cg/six-reasons-why-you-will-love-camel-k.html</feedburner:origLink></entry><entry><title>Kogito: A Modular Codegen Design Proposal</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oS3As5ZkWYA/kogito-modular-codegen-design-proposal.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Edoardo Vacchi</name></author><id>searchisko:content:id:jbossorg_blog-kogito_a_modular_codegen_design_proposal</id><updated>2020-04-23T07:45:36Z</updated><published>2020-04-23T07:45:00Z</published><content type="html">&lt;div class="markdown-here-wrapper" data-md-url="https://www.blogger.com/blogger.g?blogID=5869426#editor/target=post;postID=7640029746738508505" markdown-here-wrapper-content-modified="true"&gt;&lt;span style="color: #666666;"&gt;&lt;i&gt;Originally posted &lt;a href="https://evacchi.github.io/compilers/kogito/2020/04/23/kogito-codegen-design.html"&gt;here&lt;/a&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="markdown-here-wrapper" data-md-url="https://www.blogger.com/blogger.g?blogID=5869426#editor/target=post;postID=7640029746738508505" markdown-here-wrapper-content-modified="true"&gt;&lt;/div&gt;&lt;div class="markdown-here-wrapper" data-md-url="https://www.blogger.com/blogger.g?blogID=5869426#editor/target=post;postID=7640029746738508505" markdown-here-wrapper-content-modified="true"&gt;My favorite topic of discussion last year was &lt;i&gt;moving computations to compile-time&lt;/i&gt;. &lt;br /&gt;&lt;div style="float: right;"&gt;&lt;br /&gt;&lt;img src="https://i.imgur.com/cHmSoB8.png" title="Reflection" /&gt;&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In fact, I went to &lt;a href="https://youtu.be/TWfigR9wGsA"&gt;a few&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=BUrY6On1SxM"&gt;conferences&lt;/a&gt; explaining how &lt;b&gt;moving processing out of your run-time and into build-time&lt;/b&gt;, is a &lt;b&gt;conceptually simple&lt;/b&gt; but &lt;b&gt;extremely effective way&lt;/b&gt; to make your applications lighter. This was sometimes received with &lt;b&gt;little enthusiasm&lt;/b&gt;: the idea itself is in fact far from new. Yet, it is key to a lot of the most interesting recent innovations in the Java ecosystem.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;For better or worst, &lt;b&gt;run-time reflection&lt;/b&gt; is a peculiarity of the Java ecosystem. However, today &lt;b&gt;a lot of modern Java frameworks are embracing code generation&lt;/b&gt;; which is ironic, because, as far as I know, run-time reflection was often embraced as a reaction to slow code generation procedures. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In &lt;b&gt;&lt;a href="https://kogito.kie.org/"&gt;Kogito&lt;/a&gt;&lt;/b&gt;, we are using code generation to &lt;b&gt;pre-process&lt;/b&gt; and &lt;b&gt;compile&lt;/b&gt; so-called “business assets” into &lt;b&gt;executable code&lt;/b&gt;. In the following we will explore the history and the motivations for embracing code generation instead of run-time reflection, and how we plan to bring our approach to codegen forward, by &lt;b&gt;taking hints from compiler design&lt;/b&gt;.&lt;/div&gt;&lt;h2 id="run-time-vs-build-time-meta-programming" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Run-Time vs. Build-Time Meta-Programming&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;I believe there are many reasons why often we reach for run-time reflection, but I will name two; &lt;/div&gt;&lt;ol style="margin: 1.2em 0px; padding-left: 2em;"&gt;&lt;li style="margin: 0.5em 0px;"&gt;&lt;div style="margin: 0.5em 0px !important; margin: 0px 0px 1.2em !important;"&gt;the reflection API is “standard”: it is bundled with the JDK and it is relatively easy to use; it allows developers to implement some meta-programming logic with the tools they already know. &lt;/div&gt;&lt;/li&gt;&lt;li style="margin: 0.5em 0px;"&gt;&lt;div style="margin: 0.5em 0px !important; margin: 0px 0px 1.2em !important;"&gt;run-time reflection keeps &lt;b&gt;build time low&lt;/b&gt; and it allows for &lt;b&gt;more degrees of freedom at run-time&lt;/b&gt;. &lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;But the JDK &lt;i&gt;does&lt;/i&gt; support compile-time manipulation: although there is no “proper” macro support, there &lt;i&gt;are&lt;/i&gt; compile-time meta-programming facilities in the &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/annotation/processing/package-summary.html"&gt;&lt;b&gt;annotation processing framework&lt;/b&gt;&lt;/a&gt;. But then, although the annotation processor framework provides way to hook into the Java compiler and &lt;i&gt;process&lt;/i&gt; code, is does not provide a standardized set of tools to &lt;i&gt;generate&lt;/i&gt; code. Some people use &lt;a href="https://asm.ow2.io/"&gt;ASM&lt;/a&gt; for bytecode generation; other generate source code using &lt;a href="https://github.com/square/javapoet"&gt;JavaPoet&lt;/a&gt;, &lt;a href="https://javaparser.org/"&gt;JavaParser&lt;/a&gt; or other similar libraries. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;And I believe, this is another reason, why people choose reflection: you don’t need to &lt;i&gt;generate&lt;/i&gt; code at all.&lt;/div&gt;&lt;h3 id="the-price-of-run-time-reflection" style="font-size: 1.3em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;The Price of Run-Time Reflection&lt;/h3&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;For this and other reasons code-generation has become a lesser citizen of the Java ecosystem. However, &lt;b&gt;run-time reflection comes at a price&lt;/b&gt;. From the top of my head: &lt;/div&gt;&lt;ul style="margin: 1.2em 0px; padding-left: 2em;"&gt;&lt;li style="margin: 0.5em 0px;"&gt;&lt;b&gt;your reflection logic &lt;i&gt;must&lt;/i&gt; be rock-solid&lt;/b&gt;: otherwise many compile-time errors will turn into run-time errors; i.e. errors into your reflective logic&lt;/li&gt;&lt;li style="margin: 0.5em 0px;"&gt;&lt;b&gt;moving meta-programming logic in the run-time&lt;/b&gt; of your application &lt;a href="https://www.optaplanner.org/blog/2018/01/09/JavaReflectionButMuchFaster.html"&gt;&lt;b&gt;impacts performance&lt;/b&gt;&lt;/a&gt;: not only are reflective invocations usually slower than direct invocations, but also meta-programming logic will run as part of your main program logic, inevitably adding overhead to execution. &lt;/li&gt;&lt;/ul&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Traditionally, this was not regarded as a huge burden: in fact, Java programs used to be long-running and often server-side; the overhead of run-time reflection, being usually paid at application configuration and startup time, was considered irrelevant, because it was tiny, compared to the time they would run. &lt;/div&gt;&lt;h3 id="rediscovering-code-generation" style="font-size: 1.3em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Rediscovering Code Generation&lt;/h3&gt;&lt;div style="float: right; padding-left: 2em;"&gt;&lt;br /&gt;&lt;img src="https://i.imgur.com/mgInxYI.png" title="The Dragon Book" /&gt;&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Today &lt;b&gt;&lt;a href="https://micronaut.io/"&gt;a lot&lt;/a&gt; of &lt;a href="https://quarkus.io/"&gt;frameworks&lt;/a&gt;&lt;/b&gt; are actually going back to build-time code generation: &lt;b&gt;Kogito&lt;/b&gt; is one of those.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In the last few years, &lt;b&gt;the programming landscape &lt;a href="http://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/"&gt;has changed&lt;/a&gt;&lt;/b&gt;; for instance, constrained platforms such as Android used to have more limited support for runtime reflection different performance requirements: applications should be small and quick to start. People started to develop &lt;b&gt;microservices&lt;/b&gt; and &lt;b&gt;serverless applications&lt;/b&gt;: these services need to start very quickly, to elastically scale with the number of incoming requests. &lt;b&gt;GraalVM’s native image compiler&lt;/b&gt; is another run-time platform with additional constraints: it allows to compile a Java program into a native executable, but originally, it posed a few limitations on run-time reflection. Moreover, whereas in the past fat, long-running application servers hosted several, possibly mutable applications in a single process space, today we deploy &lt;b&gt;separate, stand-alone, immutable, containerized applications&lt;/b&gt; on Kubernetes. For all these, and other reasons, in the last few years &lt;b&gt;the Java ecosystem is rediscovering code-generation&lt;/b&gt;. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The Kogito code-generation procedure elaborates all the “knowledge assets” in a codebase and produces equivalent Java code that plugs into our core engines on one side, and into the Quarkus or Spring APIs to expose automatically generated REST service endpoints on the other. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Let’s see more in detail how this procedure works.&lt;/div&gt;&lt;h2 id="staged-compilation-in-kogito" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Staged Compilation in Kogito&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In Kogito, the code-generation procedure is designed in &lt;b&gt;stages&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div style="margin: auto; text-align: center;"&gt;&lt;img alt="Stages" src="https://i.imgur.com/YvzSkJT.png" width="70%" /&gt;&lt;/div&gt;&lt;br /&gt;First, &lt;b&gt;processes&lt;/b&gt; (BPMN files) are analyzed, then &lt;b&gt;rules&lt;/b&gt; (DRLs), then &lt;b&gt;decisions&lt;/b&gt; (DMNs). Each stage, as a result, generates Java source code; compilation is delegated to the Java compiler. In modern parlance, this would be called a &lt;i&gt;“transpiler”&lt;/i&gt;; a term that I despise, because it makes it sound like compilers do not just generate code but do some kind of magic mumbo-jumbo. But that’s another story. Whatever you want to call it, our current architecture of this procedure is rigid, and does not allow for extension&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In fact, albeit we are processing each type of asset in a &lt;i&gt;separate stage&lt;/i&gt;, each stage is effectively a &lt;b&gt;single-pass compiler&lt;/b&gt;, because each it always terminates with the generation of the compilation target. This is the reason why it is generally better to &lt;b&gt;break down compilation into more passes&lt;/b&gt;. Each compilation pass usually produces what is called an &lt;b&gt;intermediate representation&lt;/b&gt;; the input to one stage is the output of the previous, and so on up to the final stage, where target code is actually produced.&lt;/div&gt;&lt;h3 id="compilers-and-compilation-phases" style="font-size: 1.3em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Compilers and Compilation Phases&lt;/h3&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In a traditional compiler, usually, one of the first stages is &lt;b&gt;parsing&lt;/b&gt; the input source code and transforming it into an internal tree representation (the &lt;i&gt;Abstract Syntax Tree&lt;/i&gt;); then usually is the &lt;b&gt;name resolution&lt;/b&gt; phase, where the names of the values and symbols that are used throughout the program are resolved; then the &lt;b&gt;type-checking phase&lt;/b&gt; verifies and validates the correctness of the program; finally &lt;b&gt;code&lt;/b&gt; is actually &lt;b&gt;generated&lt;/b&gt;.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In Kogito, we &lt;b&gt;parse&lt;/b&gt; knowledge assets, then we associate &lt;b&gt;names&lt;/b&gt; to each assets, and we resolve their internal structure, which may &lt;b&gt;cross-reference&lt;/b&gt; other existing assets. &lt;b&gt;Type-checking our assets means validating&lt;/b&gt; the models according to specifications and verifying these cross-references. For instance, a BPMN file may reference a Rule Unit definition and a service implementation written in Java. &lt;/div&gt;&lt;h3 id="compilers-and-mini-phases" style="font-size: 1.3em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Compilers and Mini-Phases&lt;/h3&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;So far, our code-generation procedure has been pretty simplistic: we generated code regardless of potential errors, delegating compilation errors to the downstream Java compiler; worse, sometimes they would be caught later at run-time! This in general works, but it either produces pretty obscure compilation errors, or it moves validation too late in the pipeline: which is something that we wanted to avoid in the first place. We want to &lt;b&gt;catch errors early&lt;/b&gt; and only &lt;b&gt;generate valid code&lt;/b&gt;.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;By refactoring our compilation phases to a staged, modular compilation architecture we will be able to catch resolution and validation errors early and present them to users in a meaningful way: only when the validation phase will be completed successfully, then we will actually generate code. But we also want our stages to be smaller, so that it is easier to &lt;b&gt;add more compilation stages&lt;/b&gt; at different points in the pipeline.&lt;/div&gt;&lt;div style="margin: auto;"&gt;&lt;img alt="Processes, Rules, Decisions" src="https://i.imgur.com/2ffP9Sl.jpg" width="100%" /&gt;&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;For instance, suppose you want to synthesize some elements (e.g. data models) that are inferred from the structure of a process. In our current architecture, the only way to produce additional assets would be to patch the existing code. By de-composing the phases as shown above, you would be able to &lt;b&gt;plug your additional &lt;a href="https://nanopass.org/"&gt;mini-phase&lt;/a&gt;&lt;/b&gt; right after “Model Validation”, so that you can be sure that all the names have been resolved, and that only valid models will be processed: you will produce an intermediate representation for the data model that you want to synthesize, and make it available during the “Cross-Referencing” phase.&lt;/div&gt;&lt;h2 id="pre-processing-assets-vs-code-scaffolding-" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Pre-Processing Assets vs. Code Scaffolding.&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;As briefly mentioned in the introduction, in our current architecture we are also conflating code-generation for two very different purposes.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The &lt;b&gt;first&lt;/b&gt; is to &lt;b&gt;pre-process&lt;/b&gt; assets to generate their &lt;b&gt;stand-alone run-time representation&lt;/b&gt;: the goal is both to reduce run-time processing and support native compilation. The output of this code-generation procedure are objects that interface directly with the internal programmatic APIs of our engines. This programmatic API, in Kogito, is currently considered an implementation detail, not supposed to be consumed by end-users. The reason is that this API is still unstable: we want to make sure to get it right, before making it public. Now, for the sake of explanation, consider a BPMN process definition: this is compiled into a class that implement the &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;Process&amp;lt;T&amp;gt;&lt;/code&gt; interface of the programmatic API. By instantiating this class, you get an exact 1:1 representation of the process definition, minus parsing and preliminary analysis.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;The &lt;b&gt;second&lt;/b&gt; purpose of code-generation is implemented as a &lt;b&gt;layer&lt;/b&gt; on top of these run-time representations; here we exposes calls into the programmatic API as &lt;b&gt;REST endpoints&lt;/b&gt;. For example, consider a process called &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;MyProcess&lt;/code&gt;; the REST endpoints we generate expose REST APIs to start, execute and terminate an instance of that process. You can imagine that code to look a but like this:&lt;/div&gt;&lt;pre style="font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; font-size: 1em; line-height: 1.2em; margin: 1.2em 0px;"&gt;&lt;code class="hljs language-java" style="-moz-text-size-adjust: none; background-color: #f8f8f8; background: rgb(248, 248, 248) none repeat scroll 0% 0%; border-radius: 3px; border-radius: 3px; border: 1px solid rgb(204, 204, 204); border: 1px solid rgb(234, 234, 234); color: #333333; display: block !important; display: block; display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; overflow-x: auto; overflow: auto; padding: 0.5em 0.7em; padding: 0.5em; padding: 0px 0.3em; white-space: pre-wrap; white-space: pre;"&gt;&lt;span class="hljs-annotation"&gt;@Path&lt;/span&gt;(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"/MyProcess"&lt;/span&gt;)&lt;br /&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;class&lt;/span&gt; &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;MyProcessResource&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt; &lt;span class="hljs-annotation"&gt;@Inject&lt;/span&gt;&lt;br /&gt; Process&amp;lt;MyProcess&amp;gt; p;&lt;br /&gt;&lt;br /&gt; &lt;span class="hljs-annotation"&gt;@POST&lt;/span&gt;&lt;br /&gt; &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; MyProcess &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;start&lt;/span&gt;&lt;span class="hljs-params"&gt;(MyProcess data)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;return&lt;/span&gt; p.create(data).start();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class="hljs-annotation"&gt;@DELETE&lt;/span&gt;(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"/{id}"&lt;/span&gt;)&lt;br /&gt; &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; MyProcess &lt;span class="hljs-title" style="color: #990000; font-weight: bold;"&gt;abort&lt;/span&gt;&lt;span class="hljs-params"&gt;(String id)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;return&lt;/span&gt; = p.delete(id);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class="hljs-annotation"&gt;@GET&lt;/span&gt;(&lt;span class="hljs-string" style="color: #dd1144;"&gt;"/{id}"&lt;/span&gt;)&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;public&lt;/span&gt; Collection&amp;lt;ProcessInstance&amp;lt;MyProcess&amp;gt;&amp;gt; abort(String id) {&lt;br /&gt; &lt;span class="hljs-keyword" style="color: #333333; font-weight: bold;"&gt;return&lt;/span&gt; p.instances(id);&lt;br /&gt; }&lt;br /&gt; ...&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;Today, both the code that is generated for run-time representations and the code that implements REST endpoints is all treated as an &lt;i&gt;implementation detail&lt;/i&gt;. It is only visible in the compilation target directory of your project. And you are &lt;i&gt;not&lt;/i&gt; supposed to rely on the structure of that code in your own codebase.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;However, we always meant this procedure to become customizable at some point, promoting it to be &lt;b&gt;scaffolding&lt;/b&gt;. &lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In the case of scaffolding, code should not be generated in your compilation target directory, but instead, it should be promoted to your &lt;i&gt;source code&lt;/i&gt; directory. We are currently working on a general solution to allow you to opt-out from code generation for specific assets, and instead, “claim” it for ownership. For instance, suppose that you want to customize &lt;code style="background-color: #f8f8f8; border-radius: 3px; border: 1px solid rgb(234, 234, 234); display: inline; font-family: Consolas, Inconsolata, Courier, monospace; font-size: 0.85em; margin: 0px 0.15em; padding: 0px 0.3em; white-space: pre-wrap;"&gt;MyProcess&lt;/code&gt;. You will be able to tell the code-generation procedure that you want customize that asset: the code-generation procedure will run once, and then you will be able to edit the generated code as regular source code.&lt;/div&gt;&lt;h2 id="conclusions" style="border-bottom: 1px solid rgb(238, 238, 238); font-size: 1.4em; font-weight: bold; margin: 1.3em 0px 1em; padding: 0px;"&gt;Conclusions&lt;/h2&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;You should now have a better understanding of the rationale for code generation in Kogito: in the future we are going to improve our code generation procedure to allow extensibility by plugging into the code-generation process, and customization by allowing end-users to promote code generation to scaffolding.&lt;/div&gt;&lt;div style="margin: 0px 0px 1.2em !important;"&gt;In the future we will further document how we plan to refactor our codebase to support these novel use cases. &lt;/div&gt;&lt;div style="font-size: 0em; height: 0; margin: 0; max-height: 0; max-width: 0; overflow: hidden; padding: 0; width: 0;" title="MDH:PGRpdiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7YmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtmb250 LWZhbWlseTogJydGaXJhIENvZGUnLCAnRHJvaWQgU2FucyBNb25vJywgJ21vbm9zcGFjZScsIG1v bm9zcGFjZSwgJ0Ryb2lkIFNhbnMgRmFsbGJhY2snJywgJ0Ryb2lkIFNhbnMgTW9ubycsICdtb25v c3BhY2UnLCBtb25vc3BhY2UsICdEcm9pZCBTYW5zIEZhbGxiYWNrJztmb250LXdlaWdodDogbm9y bWFsO2ZvbnQtc2l6ZTogMTRweDtsaW5lLWhlaWdodDogMTlweDt3aGl0ZS1zcGFjZTogcHJlOyI+ PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4tLS08L3NwYW4+PC9kaXY+PGRpdj48 c3BhbiBzdHlsZT0iY29sb3I6ICM4MDAwMDA7Ij50aXRsZTwvc3Bhbj48c3BhbiBzdHlsZT0iY29s b3I6ICMwMDAwMDA7Ij46ICA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMGZmOyI+J0tv Z2l0bzogQSBNb2R1bGFyIENvZGVnZW4gRGVzaWduIFByb3Bvc2FsJzwvc3Bhbj48L2Rpdj48ZGl2 PjxzcGFuIHN0eWxlPSJjb2xvcjogIzgwMDAwMDsiPmNhdGVnb3JpZXM8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDAwOyI+OiBbPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBm ZjsiPkNvbXBpbGVyczwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4sIDwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwZmY7Ij5Lb2dpdG88L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDAwOyI+XTwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjog IzgwMDAwMDsiPmRhdGU8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+OiAgIDIw MjAtMDQtMjI8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4t LS08L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+TXkg ZmF2b3JpdGUgdG9waWMgb2YgZGlzY3Vzc2lvbiBsYXN0IHllYXIgd2FzIDwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHlsZTogaXRhbGljOyI+X21vdmluZyBjb21wdXRh dGlvbnMgdG8gY29tcGlsZS10aW1lXzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7 Ij4uIDwvc3Bhbj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICM4MDAwMDA7Ij4m bHQ7ZGl2PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiA8L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjZmYwMDAwOyI+c3R5bGU8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+PTwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwZmY7Ij4iPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsiPmZsb2F0OnJpZ2h0PC9zcGFuPjxzcGFuIHN0eWxl PSJjb2xvcjogIzAwMDBmZjsiPiI8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjODAwMDAwOyI+ Jmd0Ozwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzgwMDAwMDsiPiZsdDtp bWc8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IDwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICNmZjAwMDA7Ij5zcmM8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAw OyI+PTwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwZmY7Ij4iaHR0cHM6Ly9pLmltZ3Vy LmNvbS9jSG1Tb0I4LnBuZyI8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IDwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNmZjAwMDA7Ij50aXRsZTwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwMDA7Ij49PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsi PiJSZWZsZWN0aW9uIjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzgwMDAwMDsiPi8mZ3Q7PC9zcGFuPjwvZGl2PjxkaXY+PHNw YW4gc3R5bGU9ImNvbG9yOiAjODAwMDAwOyI+Jmx0Oy9kaXYmZ3Q7PC9zcGFuPjwvZGl2Pjxicj48 ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkluIGZhY3QsIEkgd2VudCB0byA8L3Nw YW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Wzwvc3Bhbj48c3BhbiBzdHlsZT0iY29s b3I6ICNhMzE1MTU7Ij5hIGZldzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5d PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPlt2ZG0xOV0gPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPls8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjYTMx NTE1OyI+Y29uZmVyZW5jZXM8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+XTwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5bcWNvbnNwMTldIGV4cGxhaW5pbmcg aG93IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7 Ij4qKm1vdmluZyBwcm9jZXNzaW5nIG91dCBvZiB5b3VyIHJ1bi10aW1lIGFuZCBpbnRvIGJ1aWxk LXRpbWUqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4sIGlzIGEgPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioqY29uY2Vw dHVhbGx5IHNpbXBsZSoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBidXQg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioq ZXh0cmVtZWx5IGVmZmVjdGl2ZSB3YXkqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAw MDA7Ij4gdG8gbWFrZSB5b3VyIGFwcGxpY2F0aW9ucyBsaWdodGVyLiBUaGlzIHdhcyBzb21ldGlt ZXMgcmVjZWl2ZWQgd2l0aCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQt d2VpZ2h0OiBib2xkOyI+KipsaXR0bGUgZW50aHVzaWFzbSoqPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPjogdGhlIGlkZWEgaXRzZWxmIGlzIGluIGZhY3QgZmFyIGZyb20gbmV3 LiBZZXQsIGl0IGlzIGtleSB0byBhIGxvdCBvZiB0aGUgbW9zdCBpbnRlcmVzdGluZyByZWNlbnQg aW5ub3ZhdGlvbnMgaW4gdGhlIEphdmEgZWNvc3lzdGVtLjwvc3Bhbj48L2Rpdj48YnI+PGRpdj48 c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5Gb3IgYmV0dGVyIG9yIHdvcnN0LCA8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipydW4tdGlt ZSByZWZsZWN0aW9uKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGlzIGEg cGVjdWxpYXJpdHkgb2YgdGhlIEphdmEgZWNvc3lzdGVtLiBIb3dldmVyLCB0b2RheSA8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KiphIGxvdCBv ZiBtb2Rlcm4gSmF2YSBmcmFtZXdvcmtzIGFyZSBlbWJyYWNpbmcgY29kZSBnZW5lcmF0aW9uKio8 L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+OyB3aGljaCBpcyBpcm9uaWMsIGJl Y2F1c2UsIGFzIGZhciBhcyBJIGtub3csIHJ1bi10aW1lIHJlZmxlY3Rpb24gd2FzIG9mdGVuIGVt YnJhY2VkIGFzIGEgcmVhY3Rpb24gdG8gc2xvdyBjb2RlIGdlbmVyYXRpb24gcHJvY2VkdXJlcy4g PC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkluIDwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKjwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5bPC9z cGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2EzMTUxNTtmb250LXdlaWdodDogYm9sZDsiPktvZ2l0 bzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5d PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPltr b2dpdG9dKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+LCB3ZSBhcmUgdXNp bmcgY29kZSBnZW5lcmF0aW9uIHRvIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7 Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKnByZS1wcm9jZXNzKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDAwOyI+IGFuZCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2Zv bnQtd2VpZ2h0OiBib2xkOyI+Kipjb21waWxlKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+IHNvLWNhbGxlZCAiYnVzaW5lc3MgYXNzZXRzIiBpbnRvIDwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKmV4ZWN1dGFibGUgY29k ZSoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPi4gSW4gdGhlIGZvbGxvd2lu ZyB3ZSB3aWxsIGV4cGxvcmUgdGhlIGhpc3RvcnkgYW5kIHRoZSBtb3RpdmF0aW9ucyBmb3IgZW1i cmFjaW5nIGNvZGUgZ2VuZXJhdGlvbiBpbnN0ZWFkIG9mIHJ1bi10aW1lIHJlZmxlY3Rpb24sIGFu ZCBob3cgd2UgcGxhbiB0byBicmluZyBvdXIgYXBwcm9hY2ggdG8gY29kZWdlbiBmb3J3YXJkLCBi eSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+ Kip0YWtpbmcgaGludHMgZnJvbSBjb21waWxlciBkZXNpZ24qKjwvc3Bhbj48c3BhbiBzdHlsZT0i Y29sb3I6ICMwMDAwMDA7Ij4uPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xv cjogIzgwMDAwMDtmb250LXdlaWdodDogYm9sZDsiPiMjIFJ1bi1UaW1lIHZzLiBCdWlsZC1UaW1l IE1ldGEtUHJvZ3JhbW1pbmcgPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xv cjogIzAwMDAwMDsiPkkgYmVsaWV2ZSB0aGVyZSBhcmUgbWFueSByZWFzb25zIHdoeSBvZnRlbiB3 ZSByZWFjaCBmb3IgcnVuLXRpbWUgcmVmbGVjdGlvbiwgYnV0IEkgd2lsbCBuYW1lIHR3bzsgPC9z cGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzA0NTFhNTsiPjEuPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiB0aGUgcmVmbGVjdGlvbiBBUEkgaXMgInN0 YW5kYXJkIjogaXQgaXMgYnVuZGxlZCB3aXRoIHRoZSBKREsgYW5kIGl0IGlzIHJlbGF0aXZlbHkg ZWFzeSB0byB1c2U7IGl0IGFsbG93cyBkZXZlbG9wZXJzIHRvIGltcGxlbWVudCBzb21lIG1ldGEt cHJvZ3JhbW1pbmcgbG9naWMgd2l0aCB0aGUgdG9vbHMgdGhleSBhbHJlYWR5IGtub3cuIDwvc3Bh bj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwNDUxYTU7Ij4yLjwvc3Bhbj48 c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gcnVuLXRpbWUgcmVmbGVjdGlvbiBrZWVwcyA8 L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+Kipi dWlsZCB0aW1lIGxvdyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBhbmQg aXQgYWxsb3dzIGZvciA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2Vp Z2h0OiBib2xkOyI+Kiptb3JlIGRlZ3JlZXMgb2YgZnJlZWRvbSBhdCBydW4tdGltZSoqPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPi4gPC9zcGFuPjwvZGl2Pjxicj48ZGl2Pjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkJ1dCB0aGUgSkRLIDwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHlsZTogaXRhbGljOyI+X2RvZXNfPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBzdXBwb3J0IGNvbXBpbGUtdGltZSBtYW5pcHVsYXRp b246IGFsdGhvdWdoIHRoZXJlIGlzIG5vICJwcm9wZXIiIG1hY3JvIHN1cHBvcnQsIHRoZXJlIDwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHlsZTogaXRhbGljOyI+X2Fy ZV88L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGNvbXBpbGUtdGltZSBtZXRh LXByb2dyYW1taW5nIGZhY2lsaXRpZXMgaW4gdGhlIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwMDA7Ij5bPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2EzMTUxNTsiPioqYW5ub3Rh dGlvbiBwcm9jZXNzaW5nIGZyYW1ld29yayoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAw MDAwMDsiPl08L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+W2Fubm90YXRpb25z XS4gQnV0IHRoZW4sIGFsdGhvdWdoIHRoZSBhbm5vdGF0aW9uIHByb2Nlc3NvciBmcmFtZXdvcmsg cHJvdmlkZXMgd2F5IHRvIGhvb2sgaW50byB0aGUgSmF2YSBjb21waWxlciBhbmQgPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDtmb250LXN0eWxlOiBpdGFsaWM7Ij5fcHJvY2Vzc188 L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGNvZGUsICBpcyBkb2VzIG5vdCBw cm92aWRlIGEgc3RhbmRhcmRpemVkIHNldCBvZiB0b29scyB0byA8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDAwO2ZvbnQtc3R5bGU6IGl0YWxpYzsiPl9nZW5lcmF0ZV88L3NwYW4+PHNw YW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGNvZGUuIFNvbWUgcGVvcGxlIHVzZSA8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Wzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICNhMzE1MTU7Ij5BU008L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+XTwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5bYXNtXSBmb3IgYnl0ZWNvZGUgZ2VuZXJh dGlvbjsgb3RoZXIgZ2VuZXJhdGUgc291cmNlIGNvZGUgdXNpbmcgPC9zcGFuPjxzcGFuIHN0eWxl PSJjb2xvcjogIzAwMDAwMDsiPls8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjYTMxNTE1OyI+ SmF2YVBvZXQ8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+XTwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5bamF2YXBvZXRdLCA8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDAwOyI+Wzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNhMzE1MTU7Ij5K YXZhUGFyc2VyPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPl08L3NwYW4+PHNw YW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+W2phdmFwYXJzZXJdIG9yIG90aGVyIHNpbWlsYXIg bGlicmFyaWVzLiA8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+QW5kIEkgYmVsaWV2ZSwgdGhpcyBpcyBhbm90aGVyIHJlYXNvbiwgd2h5IHBlb3BsZSBj aG9vc2UgcmVmbGVjdGlvbjogeW91IGRvbid0IG5lZWQgdG8gPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDtmb250LXN0eWxlOiBpdGFsaWM7Ij5fZ2VuZXJhdGVfPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBjb2RlIGF0IGFsbC48L3NwYW4+PC9kaXY+PGJyPjxk aXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjODAwMDAwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+IyMjIFRo ZSBQcmljZSBvZiBSdW4tVGltZSBSZWZsZWN0aW9uPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkZvciB0aGlzIGFuZCBvdGhlciByZWFzb25zIGNvZGUt Z2VuZXJhdGlvbiBoYXMgYmVjb21lIGEgbGVzc2VyIGNpdGl6ZW4gb2YgdGhlIEphdmEgZWNvc3lz dGVtLiBIb3dldmVyLCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2Vp Z2h0OiBib2xkOyI+KipydW4tdGltZSByZWZsZWN0aW9uIGNvbWVzIGF0IGEgcHJpY2UqKjwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4uIEZyb20gdGhlIHRvcCBvZiBteSBoZWFk OiA8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDQ1MWE1OyI+LTwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioqeW91ciByZWZsZWN0aW9uIGxvZ2lj IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC1zdHlsZTogaXRhbGljOyI+ X211c3RfPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9s ZDsiPiBiZSByb2NrLXNvbGlkKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ OiBvdGhlcndpc2UgbWFueSBjb21waWxlLXRpbWUgZXJyb3JzIHdpbGwgdHVybiBpbnRvIHJ1bi10 aW1lIGVycm9yczsgaS5lLiBlcnJvcnMgaW50byB5b3VyIHJlZmxlY3RpdmUgbG9naWM8L3NwYW4+ PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwNDUxYTU7Ij4tPC9zcGFuPjxzcGFuIHN0 eWxlPSJjb2xvcjogIzAwMDAwMDsiPiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgw O2ZvbnQtd2VpZ2h0OiBib2xkOyI+Kiptb3ZpbmcgbWV0YS1wcm9ncmFtbWluZyBsb2dpYyBpbiB0 aGUgcnVuLXRpbWUqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gb2YgeW91 ciBhcHBsaWNhdGlvbiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Wzwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICNhMzE1MTU7Ij4qKmltcGFjdHMgcGVyZm9ybWFuY2UqKjwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5dPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPltyZWZsZWN0aW9uXTogbm90IG9ubHkgYXJlIHJlZmxlY3RpdmUgaW52 b2NhdGlvbnMgdXN1YWxseSBzbG93ZXIgdGhhbiBkaXJlY3QgaW52b2NhdGlvbnMsIGJ1dCBhbHNv IG1ldGEtcHJvZ3JhbW1pbmcgbG9naWMgd2lsbCBydW4gYXMgcGFydCBvZiB5b3VyIG1haW4gcHJv Z3JhbSBsb2dpYywgaW5ldml0YWJseSBhZGRpbmcgb3ZlcmhlYWQgdG8gZXhlY3V0aW9uLiA8L3Nw YW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+VHJhZGl0aW9u YWxseSwgdGhpcyB3YXMgbm90IHJlZ2FyZGVkIGFzIGEgaHVnZSBidXJkZW46IGluIGZhY3QsIEph dmEgcHJvZ3JhbXMgdXNlZCB0byBiZSBsb25nLXJ1bm5pbmcgYW5kIG9mdGVuIHNlcnZlci1zaWRl OyB0aGUgb3ZlcmhlYWQgb2YgcnVuLXRpbWUgcmVmbGVjdGlvbiwgYmVpbmcgdXN1YWxseSBwYWlk IGF0IGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24gYW5kIHN0YXJ0dXAgdGltZSwgd2FzIGNvbnNp ZGVyZWQgaXJyZWxldmFudCwgYmVjYXVzZSBpdCB3YXMgdGlueSwgY29tcGFyZWQgdG8gdGhlIHRp bWUgdGhleSB3b3VsZCBydW4uIDwvc3Bhbj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29s b3I6ICM4MDAwMDA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4jIyMgUmVkaXNjb3ZlcmluZyBDb2RlIEdl bmVyYXRpb248L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjODAwMDAw OyI+Jmx0O2Rpdjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogI2ZmMDAwMDsiPnN0eWxlPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzAwMDAwMDsiPj08L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMGZmOyI+Ijwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwZmY7Ij5mbG9hdDpyaWdodDsgcGFkZGluZy1sZWZ0 OiAyZW08L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMGZmOyI+Ijwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICM4MDAwMDA7Ij4mZ3Q7PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjODAwMDAwOyI+Jmx0O2ltZzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAw MDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2ZmMDAwMDsiPnNyYzwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij49PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAw MDBmZjsiPiJodHRwczovL2kuaW1ndXIuY29tL21nSW54WUkucG5nIjwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2ZmMDAwMDsi PnRpdGxlPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPj08L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMGZmOyI+IlRoZSBEcmFnb24gQm9vayI8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjODAwMDAwOyI+LyZndDs8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0i Y29sb3I6ICM4MDAwMDA7Ij4mbHQ7L2RpdiZndDs8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+VG9kYXkgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPls8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj YTMxNTE1O2ZvbnQtd2VpZ2h0OiBib2xkOyI+YSBsb3Q8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9y OiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+XTwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5bbWljcm9uYXV0XSBvZiA8L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+Wzwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICNhMzE1MTU7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5mcmFtZXdvcmtzPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPl08L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+W3F1YXJrdXNd Kio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGFyZSBhY3R1YWxseSBnb2lu ZyBiYWNrIHRvIGJ1aWxkLXRpbWUgY29kZSBnZW5lcmF0aW9uOiA8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipLb2dpdG8qKjwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gaXMgb25lIG9mIHRob3NlLjwvc3Bhbj48L2Rpdj48 YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5JbiB0aGUgbGFzdCBmZXcgeWVh cnMsIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7 Ij4qKnRoZSBwcm9ncmFtbWluZyBsYW5kc2NhcGUgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPls8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj YTMxNTE1O2ZvbnQtd2VpZ2h0OiBib2xkOyI+aGFzIGNoYW5nZWQ8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+XTwvc3Bhbj48c3BhbiBzdHlsZT0i Y29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5bY2RpbGl0ZV0qKjwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij47IGZvciBpbnN0YW5jZSwgY29uc3RyYWluZWQgcGxh dGZvcm1zIHN1Y2ggYXMgQW5kcm9pZCB1c2VkIHRvIGhhdmUgbW9yZSBsaW1pdGVkIHN1cHBvcnQg Zm9yIHJ1bnRpbWUgcmVmbGVjdGlvbiBkaWZmZXJlbnQgcGVyZm9ybWFuY2UgcmVxdWlyZW1lbnRz OiBhcHBsaWNhdGlvbnMgc2hvdWxkIGJlIHNtYWxsIGFuZCBxdWljayB0byBzdGFydC4gUGVvcGxl IHN0YXJ0ZWQgdG8gZGV2ZWxvcCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2Zv bnQtd2VpZ2h0OiBib2xkOyI+KiptaWNyb3NlcnZpY2VzKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDAwOyI+IGFuZCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2Zv bnQtd2VpZ2h0OiBib2xkOyI+KipzZXJ2ZXJsZXNzIGFwcGxpY2F0aW9ucyoqPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPjogdGhlc2Ugc2VydmljZXMgbmVlZCB0byBzdGFydCB2 ZXJ5IHF1aWNrbHksIHRvIGVsYXN0aWNhbGx5IHNjYWxlIHdpdGggdGhlIG51bWJlciBvZiBpbmNv bWluZyByZXF1ZXN0cy4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdl aWdodDogYm9sZDsiPioqR3JhYWxWTSdzIG5hdGl2ZSBpbWFnZSBjb21waWxlcioqPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBpcyBhbm90aGVyIHJ1bi10aW1lIHBsYXRmb3Jt IHdpdGggYWRkaXRpb25hbCBjb25zdHJhaW50czogaXQgYWxsb3dzIHRvIGNvbXBpbGUgYSBKYXZh IHByb2dyYW0gaW50byBhIG5hdGl2ZSBleGVjdXRhYmxlLCBidXQgb3JpZ2luYWxseSwgaXQgcG9z ZWQgYSBmZXcgbGltaXRhdGlvbnMgb24gcnVuLXRpbWUgcmVmbGVjdGlvbi4gTW9yZW92ZXIsIHdo ZXJlYXMgaW4gdGhlIHBhc3QgZmF0LCBsb25nLXJ1bm5pbmcgYXBwbGljYXRpb24gc2VydmVycyBo b3N0ZWQgc2V2ZXJhbCwgcG9zc2libHkgbXV0YWJsZSBhcHBsaWNhdGlvbnMgaW4gYSBzaW5nbGUg cHJvY2VzcyBzcGFjZSwgdG9kYXkgd2UgZGVwbG95IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKnNlcGFyYXRlLCBzdGFuZC1hbG9uZSwgaW1t dXRhYmxlLCBjb250YWluZXJpemVkIGFwcGxpY2F0aW9ucyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPiBvbiBLdWJlcm5ldGVzLiBGb3IgYWxsIHRoZXNlLCBhbmQgb3RoZXIg cmVhc29ucywgaW4gdGhlIGxhc3QgZmV3IHllYXJzIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKnRoZSBKYXZhIGVjb3N5c3RlbSBpcyByZWRp c2NvdmVyaW5nIGNvZGUtZ2VuZXJhdGlvbioqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAw MDAwMDsiPi4gPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAw MDsiPlRoZSBLb2dpdG8gY29kZS1nZW5lcmF0aW9uIHByb2NlZHVyZSBlbGFib3JhdGVzIGFsbCB0 aGUgImtub3dsZWRnZSBhc3NldHMiIGluIGEgY29kZWJhc2UgYW5kIHByb2R1Y2VzIGVxdWl2YWxl bnQgSmF2YSBjb2RlIHRoYXQgcGx1Z3MgaW50byBvdXIgY29yZSBlbmdpbmVzIG9uIG9uZSBzaWRl LCBhbmQgaW50byB0aGUgUXVhcmt1cyBvciBTcHJpbmcgQVBJcyB0byBleHBvc2UgYXV0b21hdGlj YWxseSBnZW5lcmF0ZWQgUkVTVCBzZXJ2aWNlIGVuZHBvaW50cyBvbiB0aGUgb3RoZXIuIDwvc3Bh bj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5MZXQncyBzZWUg bW9yZSBpbiBkZXRhaWwgaG93IHRoaXMgcHJvY2VkdXJlIHdvcmtzLjwvc3Bhbj48L2Rpdj48YnI+ PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICM4MDAwMDA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4jIyBT dGFnZWQgQ29tcGlsYXRpb24gaW4gS29naXRvPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0 eWxlPSJjb2xvcjogIzAwMDAwMDsiPkluIEtvZ2l0bywgdGhlIGNvZGUtZ2VuZXJhdGlvbiBwcm9j ZWR1cmUgaXMgZGVzaWduZWQgaW4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtm b250LXdlaWdodDogYm9sZDsiPioqc3RhZ2VzKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+LiA8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+ICAgICAgKy0tLS0tLS0tLS0tKyAgICAgICstLS0tLS0tLS0tLSsgICAgICArLS0tLS0t LS0tLS0rPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAg ICAgfCAgICAgICAgICAgfCAgICAgIHwgICAgICAgICAgIHwgICAgICB8ICAgICAgICAgICB8PC9z cGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAgfCBQcm9j ZXNzZXMgKy0tLS0tJmd0OysgICBSdWxlcyAgICstLS0tLSZndDsrIERlY2lzaW9ucyB8PC9zcGFu PjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAgfCAgICAgICAg ICAgfCAgICAgIHwgICAgICAgICAgIHwgICAgICB8ICAgICAgICAgICB8PC9zcGFuPjwvZGl2Pjxk aXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAgKy0tLS0tKy0tLS0tKyAgICAg ICstLS0tLSstLS0tLSsgICAgICArLS0tLS0rLS0tLS0rPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgIHwg ICAgICAgICAgICAgICAgICB8PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+ICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAg ICB8PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAg ICstLS0tdi0tLS0rICAgICAgICArLS0tLXYtLS0tKyAgICAgICAgKy0tLS12LS0tLSs8L3NwYW4+ PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gICAgICAgfCAgICAgICAg IHwgICAgICAgIHwgICAgICAgICB8ICAgICAgICB8ICAgICAgICAgfDwvc3Bhbj48L2Rpdj48ZGl2 PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiAgICAgICB8IENvZGVnZW4gfCAgICAgICAg fCBDb2RlZ2VuIHwgICAgICAgIHwgQ29kZWdlbiB8PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgICAgIHwgICAgICAgICB8ICAgICAgICB8ICAgICAgICAg fCAgICAgICAgfCAgICAgICAgIHw8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwMDA7Ij4gICAgICAgKy0tLS0tLS0tLSsgICAgICAgICstLS0tLS0tLS0rICAgICAgICAr LS0tLS0tLS0tKzwvc3Bhbj48L2Rpdj48YnI+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+Rmlyc3QsIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13 ZWlnaHQ6IGJvbGQ7Ij4qKnByb2Nlc3NlcyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAw MDAwMDsiPiAoQlBNTiBmaWxlcykgYXJlIGFuYWx5emVkLCB0aGVuIDwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKnJ1bGVzKio8L3NwYW4+PHNw YW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IChEUkxzKSwgdGhlbiA8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipkZWNpc2lvbnMqKjwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gKERNTnMpLiBFYWNoIHN0YWdlLCBhcyBh IHJlc3VsdCwgZ2VuZXJhdGVzIEphdmEgc291cmNlIGNvZGU7IGNvbXBpbGF0aW9uIGlzIGRlbGVn YXRlZCB0byB0aGUgSmF2YSBjb21waWxlci4gSW4gbW9kZXJuIHBhcmxhbmNlLCB0aGlzIHdvdWxk IGJlIGNhbGxlZCBhIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHls ZTogaXRhbGljOyI+XyJ0cmFuc3BpbGVyIl88L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+OyBhIHRlcm0gdGhhdCBJIGRlc3Bpc2UsIGJlY2F1c2UgaXQgbWFrZXMgaXQgc291bmQg bGlrZSBjb21waWxlcnMgZG8gbm90IGp1c3QgZ2VuZXJhdGUgY29kZSBidXQgZG8gc29tZSBraW5k IG9mIG1hZ2ljIG11bWJvLWp1bWJvLiBCdXQgdGhhdCdzIGFub3RoZXIgc3RvcnkuIFdoYXRldmVy IHlvdSB3YW50IHRvIGNhbGwgaXQsIG91ciBjdXJyZW50IGFyY2hpdGVjdHVyZSBvZiB0aGlzIHBy b2NlZHVyZSBpcyByaWdpZCwgYW5kIGRvZXMgbm90IGFsbG93IGZvciBleHRlbnNpb248L3NwYW4+ PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+SW4gZmFjdCwgYWxi ZWl0IHdlIGFyZSBwcm9jZXNzaW5nIGVhY2ggdHlwZSBvZiBhc3NldCBpbiBhIDwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHlsZTogaXRhbGljOyI+X3NlcGFyYXRlIHN0 YWdlXzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4sIGVhY2ggc3RhZ2UgaXMg ZWZmZWN0aXZlbHkgYSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2Vp Z2h0OiBib2xkOyI+KipzaW5nbGUtcGFzcyBjb21waWxlcioqPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPiwgYmVjYXVzZSBlYWNoIGl0IGFsd2F5cyB0ZXJtaW5hdGVzIHdpdGgg dGhlIGdlbmVyYXRpb24gb2YgdGhlIGNvbXBpbGF0aW9uIHRhcmdldC4gVGhpcyBpcyB0aGUgcmVh c29uIHdoeSBpdCBpcyBnZW5lcmFsbHkgYmV0dGVyIHRvIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29s b3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKmJyZWFrIGRvd24gY29tcGlsYXRpb24g aW50byBtb3JlIHBhc3NlcyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPi4g RWFjaCBjb21waWxhdGlvbiBwYXNzIHVzdWFsbHkgcHJvZHVjZXMgd2hhdCBpcyBjYWxsZWQgYW4g PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioq aW50ZXJtZWRpYXRlIHJlcHJlc2VudGF0aW9uKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+OyB0aGUgaW5wdXQgdG8gb25lIHN0YWdlIGlzIHRoZSBvdXRwdXQgb2YgdGhlIHBy ZXZpb3VzLCBhbmQgc28gb24gdXAgdG8gdGhlIGZpbmFsIHN0YWdlLCB3aGVyZSB0YXJnZXQgY29k ZSBpcyBhY3R1YWxseSBwcm9kdWNlZC48L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjODAwMDAwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+IyMjIENvbXBpbGVycyBhbmQgQ29t cGlsYXRpb24gUGhhc2VzPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPkluIGEgdHJhZGl0aW9uYWwgY29tcGlsZXIsIHVzdWFsbHksIG9uZSBvZiB0aGUg Zmlyc3Qgc3RhZ2VzIGlzIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13 ZWlnaHQ6IGJvbGQ7Ij4qKnBhcnNpbmcqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAw MDA7Ij4gdGhlIGlucHV0IHNvdXJjZSBjb2RlIGFuZCB0cmFuc2Zvcm1pbmcgaXQgaW50byBhbiBp bnRlcm5hbCB0cmVlIHJlcHJlc2VudGF0aW9uICh0aGUgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzAwMDAwMDtmb250LXN0eWxlOiBpdGFsaWM7Ij4qQWJzdHJhY3QgU3ludGF4IFRyZWUqPC9z cGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPik7IHRoZW4gdXN1YWxseSBpcyB0aGUg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioq bmFtZSByZXNvbHV0aW9uKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IHBo YXNlLCB3aGVyZSB0aGUgbmFtZXMgb2YgdGhlIHZhbHVlcyBhbmQgc3ltYm9scyB0aGF0IGFyZSB1 c2VkIHRocm91Z2hvdXQgdGhlIHByb2dyYW0gYXJlIHJlc29sdmVkOyB0aGVuIHRoZSA8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+Kip0eXBlLWNo ZWNraW5nIHBoYXNlKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IHZlcmlm aWVzIGFuZCB2YWxpZGF0ZXMgdGhlIGNvcnJlY3RuZXNzIG9mIHRoZSBwcm9ncmFtOyBmaW5hbGx5 IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4q KmNvZGUqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gaXMgYWN0dWFsbHkg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioq Z2VuZXJhdGVkKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Ljwvc3Bhbj48 L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5JbiBLb2dpdG8sIHdl IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4q KnBhcnNlKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGtub3dsZWRnZSBh c3NldHMsIHRoZW4gd2UgYXNzb2NpYXRlIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAw ODA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4qKm5hbWVzKio8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9y OiAjMDAwMDAwOyI+IHRvIGVhY2ggYXNzZXRzLCBhbmQgd2UgcmVzb2x2ZSB0aGVpciBpbnRlcm5h bCBzdHJ1Y3R1cmUsIHdoaWNoIG1heSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgw O2ZvbnQtd2VpZ2h0OiBib2xkOyI+Kipjcm9zcy1yZWZlcmVuY2UqKjwvc3Bhbj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwMDA7Ij4gb3RoZXIgZXhpc3RpbmcgYXNzZXRzLiA8L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipUeXBlLWNoZWNraW5n IG91ciBhc3NldHMgbWVhbnMgdmFsaWRhdGluZyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPiB0aGUgbW9kZWxzIGFjY29yZGluZyB0byBzcGVjaWZpY2F0aW9ucyBhbmQgdmVy aWZ5aW5nIHRoZXNlIGNyb3NzLXJlZmVyZW5jZXMuIEZvciBpbnN0YW5jZSwgYSBCUE1OIGZpbGUg bWF5IHJlZmVyZW5jZSBhIFJ1bGUgVW5pdCBkZWZpbml0aW9uIGFuZCBhIHNlcnZpY2UgaW1wbGVt ZW50YXRpb24gd3JpdHRlbiBpbiBKYXZhLiA8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjODAwMDAwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+IyMjIENvbXBpbGVycyBhbmQg TWluaS1QaGFzZXM8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+U28gZmFyLCBvdXIgY29kZS1nZW5lcmF0aW9uIHByb2NlZHVyZSBoYXMgYmVlbiBwcmV0 dHkgc2ltcGxpc3RpYzogd2UgZ2VuZXJhdGVkIGNvZGUgcmVnYXJkbGVzcyBvZiBwb3RlbnRpYWwg ZXJyb3JzLCBkZWxlZ2F0aW5nIGNvbXBpbGF0aW9uIGVycm9ycyB0byB0aGUgZG93bnN0cmVhbSBK YXZhIGNvbXBpbGVyOyB3b3JzZSwgc29tZXRpbWVzIHRoZXkgd291bGQgYmUgY2F1Z2h0IGxhdGVy IGF0IHJ1bi10aW1lISBUaGlzIGluIGdlbmVyYWwgd29ya3MsIGJ1dCBpdCBlaXRoZXIgcHJvZHVj ZXMgcHJldHR5IG9ic2N1cmUgY29tcGlsYXRpb24gZXJyb3JzLCBvciBpdCBtb3ZlcyB2YWxpZGF0 aW9uIHRvbyBsYXRlIGluIHRoZSBwaXBlbGluZTogd2hpY2ggaXMgc29tZXRoaW5nIHRoYXQgd2Ug d2FudGVkIHRvIGF2b2lkIGluIHRoZSBmaXJzdCBwbGFjZS4gV2Ugd2FudCB0byA8L3NwYW4+PHNw YW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipjYXRjaCBlcnJv cnMgZWFybHkqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gYW5kIG9ubHkg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioq Z2VuZXJhdGUgdmFsaWQgY29kZSoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi Pi48L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Qnkg cmVmYWN0b3Jpbmcgb3VyIGNvbXBpbGF0aW9uIHBoYXNlcyB0byBhIHN0YWdlZCwgbW9kdWxhciBj b21waWxhdGlvbiBhcmNoaXRlY3R1cmUgd2Ugd2lsbCBiZSBhYmxlIHRvIGNhdGNoIHJlc29sdXRp b24gYW5kIHZhbGlkYXRpb24gZXJyb3JzIGVhcmx5IGFuZCBwcmVzZW50IHRoZW0gdG8gdXNlcnMg aW4gYSBtZWFuaW5nZnVsIHdheTogb25seSB3aGVuIHRoZSB2YWxpZGF0aW9uIHBoYXNlIHdpbGwg YmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgdGhlbiB3ZSB3aWxsIGFjdHVhbGx5IGdlbmVyYXRl IGNvZGUuIEJ1dCB3ZSBhbHNvIHdhbnQgb3VyIHN0YWdlcyB0byBiZSBzbWFsbGVyLCBzbyB0aGF0 IGl0IGlzIGVhc2llciB0byA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQt d2VpZ2h0OiBib2xkOyI+KiphZGQgbW9yZSBjb21waWxhdGlvbiBzdGFnZXMqKjwvc3Bhbj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gYXQgZGlmZmVyZW50IHBvaW50cyBpbiB0aGUgcGlw ZWxpbmUuPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi PiAgICBQcm9jZXNzZXMsIFJ1bGVzLCBEZWNpc2lvbnM6PC9zcGFuPjwvZGl2Pjxicj48ZGl2Pjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiAgICArLS0tLS0tLS0tLS0tLS0tLS0rICAgICAg Ky0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICArLS0t LS0tLS0tLS0tLS0tLS0rPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+ICAgIHwgICAgICAgICAgICAgICAgIHwgICAgICB8ICAgICAgICAgICAgICAgICAgfCAg ICAgIHwgICAgICAgICAgICAgICAgICAgfCAgICAgIHwgICAgICAgICAgICAgICAgIHw8L3NwYW4+ PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gICAgfCBOYW1lIFJlc29s dXRpb24gKy0tLS0tJmd0OysgTW9kZWwgVmFsaWRhdGlvbiArLS0tLS0mZ3Q7KyBDcm9zcy1SZWZl cmVuY2luZyArLS0tLS0mZ3Q7KyBDb2RlLUdlbmVyYXRpb24gfDwvc3Bhbj48L2Rpdj48ZGl2Pjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiAgICB8ICAgICAgICAgICAgICAgICB8ICAgICAg fCAgICAgICAgICAgICAgICAgIHwgICAgICB8ICAgICAgICAgICAgICAgICAgIHwgICAgICB8ICAg ICAgICAgICAgICAgICB8PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+ICAgICstLS0tLS0tLS0tLS0tLS0tLSsgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tKyAg ICAgICstLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICstLS0tLS0tLS0tLS0tLS0tLSs8L3NwYW4+ PC9kaXY+PGJyPjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkZvciBpbnN0 YW5jZSwgc3VwcG9zZSB5b3Ugd2FudCB0byBzeW50aGVzaXplIHNvbWUgZWxlbWVudHMgKGUuZy4g ZGF0YSBtb2RlbHMpIHRoYXQgYXJlIGluZmVycmVkIGZyb20gdGhlIHN0cnVjdHVyZSBvZiBhIHBy b2Nlc3MuIEluIG91ciBjdXJyZW50IGFyY2hpdGVjdHVyZSwgdGhlIG9ubHkgd2F5IHRvIHByb2R1 Y2UgYWRkaXRpb25hbCBhc3NldHMgd291bGQgYmUgdG8gcGF0Y2ggdGhlIGV4aXN0aW5nIGNvZGUu IEJ5IGRlLWNvbXBvc2luZyB0aGUgcGhhc2VzIGFzIHNob3duIGFib3ZlLCB5b3Ugd291bGQgYmUg YWJsZSB0byA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBi b2xkOyI+KipwbHVnIHlvdXIgYWRkaXRpb25hbCA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+Wzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNh MzE1MTU7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij5taW5pLXBoYXNlPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPl08L3NwYW4+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+W25hbm9wYXNzXSoqPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiByaWdodCBhZnRlciAiTW9kZWwgVmFsaWRhdGlvbiIs IHNvIHRoYXQgeW91IGNhbiBiZSBzdXJlIHRoYXQgYWxsIHRoZSBuYW1lcyBoYXZlIGJlZW4gcmVz b2x2ZWQsIGFuZCB0aGF0IG9ubHkgdmFsaWQgbW9kZWxzIHdpbGwgYmUgcHJvY2Vzc2VkOiB5b3Ug d2lsbCBwcm9kdWNlIGFuIGludGVybWVkaWF0ZSByZXByZXNlbnRhdGlvbiBmb3IgdGhlIGRhdGEg bW9kZWwgdGhhdCB5b3Ugd2FudCB0byBzeW50aGVzaXplLCBhbmQgbWFrZSBpdCBhdmFpbGFibGUg ZHVyaW5nIHRoZSAiQ3Jvc3MtUmVmZXJlbmNpbmciIHBoYXNlLjwvc3Bhbj48L2Rpdj48YnI+PGRp dj48c3BhbiBzdHlsZT0iY29sb3I6ICM4MDAwMDA7Zm9udC13ZWlnaHQ6IGJvbGQ7Ij4jIyBQcmUt UHJvY2Vzc2luZyBBc3NldHMgdnMuIENvZGUgU2NhZmZvbGRpbmcuPC9zcGFuPjwvZGl2Pjxicj48 ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPkFzIGJyaWVmbHkgbWVudGlvbmVkIGlu IHRoZSBpbnRyb2R1Y3Rpb24sIGluIG91ciBjdXJyZW50IGFyY2hpdGVjdHVyZSB3ZSBhcmUgYWxz byBjb25mbGF0aW5nIGNvZGUtZ2VuZXJhdGlvbiBmb3IgdHdvIHZlcnkgZGlmZmVyZW50IHB1cnBv c2VzLjwvc3Bhbj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5U aGUgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsi PioqZmlyc3QqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gaXMgdG8gPC9z cGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioqcHJl LXByb2Nlc3MqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gYXNzZXRzIHRv IGdlbmVyYXRlIHRoZWlyIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwODA7Zm9udC13 ZWlnaHQ6IGJvbGQ7Ij4qKnN0YW5kLWFsb25lIHJ1bi10aW1lIHJlcHJlc2VudGF0aW9uKio8L3Nw YW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+OiB0aGUgZ29hbCBpcyBib3RoIHRvIHJl ZHVjZSBydW4tdGltZSBwcm9jZXNzaW5nIGFuZCBzdXBwb3J0IG5hdGl2ZSBjb21waWxhdGlvbi4g VGhlIG91dHB1dCBvZiB0aGlzIGNvZGUtZ2VuZXJhdGlvbiBwcm9jZWR1cmUgYXJlIG9iamVjdHMg dGhhdCBpbnRlcmZhY2UgZGlyZWN0bHkgd2l0aCB0aGUgaW50ZXJuYWwgcHJvZ3JhbW1hdGljIEFQ SXMgb2Ygb3VyIGVuZ2luZXMuIFRoaXMgcHJvZ3JhbW1hdGljIEFQSSwgaW4gS29naXRvLCBpcyBj dXJyZW50bHkgY29uc2lkZXJlZCBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIG5vdCBzdXBwb3Nl ZCB0byBiZSBjb25zdW1lZCBieSBlbmQtdXNlcnMuIFRoZSByZWFzb24gaXMgdGhhdCB0aGlzIEFQ SSBpcyBzdGlsbCB1bnN0YWJsZTogd2Ugd2FudCB0byBtYWtlIHN1cmUgdG8gZ2V0IGl0IHJpZ2h0 LCBiZWZvcmUgbWFraW5nIGl0IHB1YmxpYy4gTm93LCBmb3IgdGhlIHNha2Ugb2YgZXhwbGFuYXRp b24sIGNvbnNpZGVyIGEgQlBNTiBwcm9jZXNzIGRlZmluaXRpb246IHRoaXMgaXMgY29tcGlsZWQg aW50byBhIGNsYXNzIHRoYXQgaW1wbGVtZW50IHRoZSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9y OiAjODAwMDAwOyI+YFByb2Nlc3MmbHQ7VCZndDtgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPiBpbnRlcmZhY2Ugb2YgdGhlIHByb2dyYW1tYXRpYyBBUEkuIEJ5IGluc3RhbnRp YXRpbmcgdGhpcyBjbGFzcywgeW91IGdldCBhbiBleGFjdCAxOjEgcmVwcmVzZW50YXRpb24gb2Yg dGhlIHByb2Nlc3MgZGVmaW5pdGlvbiwgbWludXMgcGFyc2luZyBhbmQgcHJlbGltaW5hcnkgYW5h bHlzaXMuPC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi PlRoZSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xk OyI+KipzZWNvbmQqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gcHVycG9z ZSBvZiBjb2RlLWdlbmVyYXRpb24gaXMgaW1wbGVtZW50ZWQgYXMgYSA8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBib2xkOyI+KipsYXllcioqPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiBvbiB0b3Agb2YgdGhlc2UgcnVuLXRpbWUgcmVw cmVzZW50YXRpb25zOyBoZXJlIHdlIGV4cG9zZXMgY2FsbHMgaW50byB0aGUgcHJvZ3JhbW1hdGlj IEFQSSBhcyA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDgwO2ZvbnQtd2VpZ2h0OiBi b2xkOyI+KipSRVNUIGVuZHBvaW50cyoqPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAw MDsiPi4gRm9yIGV4YW1wbGUsIGNvbnNpZGVyIGEgcHJvY2VzcyBjYWxsZWQgPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzgwMDAwMDsiPmBNeVByb2Nlc3NgPC9zcGFuPjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPjsgdGhlIFJFU1QgZW5kcG9pbnRzIHdlIGdlbmVyYXRlIGV4cG9zZSBS RVNUIEFQSXMgdG8gc3RhcnQsIGV4ZWN1dGUgYW5kIHRlcm1pbmF0ZSBhbiBpbnN0YW5jZSBvZiB0 aGF0IHByb2Nlc3MuIFlvdSBjYW4gaW1hZ2luZSB0aGF0IGNvZGUgdG8gbG9vayBhIGJ1dCBsaWtl IHRoaXM6PC9zcGFuPjwvZGl2Pjxicj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi PmBgYGphdmE8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5A PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzI2N2Y5OTsiPlBhdGg8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDAwOyI+KDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNhMzE1MTU7 Ij4iL015UHJvY2VzcyI8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+KTwvc3Bh bj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsiPnB1YmxpYzwvc3Bhbj48 c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDBmZjsiPmNsYXNzPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiA8L3Nw YW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMjY3Zjk5OyI+TXlQcm9jZXNzUmVzb3VyY2U8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IHs8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gIDwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPiAgQDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMyNjdmOTk7Ij5J bmplY3Q8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gIDwv c3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMyNjdmOTk7Ij5Qcm9jZXNzPC9zcGFuPjxzcGFuIHN0 eWxlPSJjb2xvcjogIzAwMDAwMDsiPiZsdDs8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMjY3 Zjk5OyI+TXlQcm9jZXNzPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiZndDsg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMTA4MDsiPnA8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDAwOyI+Ozwvc3Bhbj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29s b3I6ICMwMDAwMDA7Ij4gIEA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMjY3Zjk5OyI+UE9T VDwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiAgPC9zcGFu PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsiPnB1YmxpYzwvc3Bhbj48c3BhbiBzdHlsZT0i Y29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzI2N2Y5OTsiPk15 UHJvY2Vzczwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzc5NWUyNjsiPnN0YXJ0PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPig8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMjY3Zjk5OyI+TXlQcm9jZXNz PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPiA8L3NwYW4+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAxMDgwOyI+ZGF0YTwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7 Ij4pIHs8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gICAg PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2FmMDBkYjsiPnJldHVybjwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMTA4 MDsiPnA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Ljwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICM3OTVlMjY7Ij5jcmVhdGU8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwOyI+KGRhdGEpLjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICM3OTVlMjY7Ij5zdGFy dDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4oKTs8L3NwYW4+PC9kaXY+PGRp dj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gIH08L3NwYW4+PC9kaXY+PGJyPjxkaXY+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICBAPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzI2N2Y5OTsiPkRFTEVURTwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4o PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogI2EzMTUxNTsiPiIve2lkfSI8L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+KTwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJj b2xvcjogIzAwMDAwMDsiPiAgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsiPnB1 YmxpYzwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0 eWxlPSJjb2xvcjogIzI2N2Y5OTsiPk15UHJvY2Vzczwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6 ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzc5NWUyNjsiPmFib3J0PC9z cGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPig8L3NwYW4+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMjY3Zjk5OyI+U3RyaW5nPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi PiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAxMDgwOyI+aWQ8L3NwYW4+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDAwOyI+KSB7PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDAwOyI+ICAgIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNhZjAwZGI7Ij5y ZXR1cm48L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ID0gPC9zcGFuPjxzcGFu IHN0eWxlPSJjb2xvcjogIzAwMTA4MDsiPnA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAw MDAwOyI+Ljwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICM3OTVlMjY7Ij5kZWxldGU8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+KGlkKTs8L3NwYW4+PC9kaXY+PGRpdj48c3Bh biBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gIH08L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICBAPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzI2 N2Y5OTsiPkdFVDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4oPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogI2EzMTUxNTsiPiIve2lkfSI8L3NwYW4+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDAwOyI+KTwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAw MDAwMDsiPiAgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDBmZjsiPnB1YmxpYzwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzI2N2Y5OTsiPkNvbGxlY3Rpb248L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAw OyI+Jmx0Ozwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMyNjdmOTk7Ij5Qcm9jZXNzSW5zdGFu Y2U8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+Jmx0Ozwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMyNjdmOTk7Ij5NeVByb2Nlc3M8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9y OiAjMDAwMDAwOyI+Jmd0OyZndDsgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzc5NWUyNjsi PmFib3J0PC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPig8L3NwYW4+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMjY3Zjk5OyI+U3RyaW5nPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAxMDgwOyI+aWQ8L3NwYW4+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+KSB7PC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAgIDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICNh ZjAwZGI7Ij5yZXR1cm48L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IDwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDEwODA7Ij5wPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzAwMDAwMDsiPi48L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjNzk1ZTI2OyI+aW5zdGFu Y2VzPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPihpZCk7PC9zcGFuPjwvZGl2 PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICB9PC9zcGFuPjwvZGl2PjxkaXY+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+ICAuLi48L3NwYW4+PC9kaXY+PGJyPjxkaXY+ PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+fTwvc3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0 eWxlPSJjb2xvcjogIzAwMDAwMDsiPmBgYDwvc3Bhbj48L2Rpdj48YnI+PGJyPjxkaXY+PHNwYW4g c3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+VG9kYXksIGJvdGggdGhlIGNvZGUgdGhhdCBpcyBnZW5l cmF0ZWQgZm9yIHJ1bi10aW1lIHJlcHJlc2VudGF0aW9ucyBhbmQgdGhlIGNvZGUgdGhhdCBpbXBs ZW1lbnRzIFJFU1QgZW5kcG9pbnRzIGlzIGFsbCB0cmVhdGVkIGFzIGFuIDwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwMDA7Zm9udC1zdHlsZTogaXRhbGljOyI+KmltcGxlbWVudGF0aW9u IGRldGFpbCo8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+LiBJdCBpcyBvbmx5 IHZpc2libGUgaW4gdGhlIGNvbXBpbGF0aW9uIHRhcmdldCBkaXJlY3Rvcnkgb2YgeW91ciBwcm9q ZWN0LiBBbmQgeW91IGFyZSA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwO2ZvbnQt c3R5bGU6IGl0YWxpYzsiPl9ub3RfPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsi PiBzdXBwb3NlZCB0byByZWx5IG9uIHRoZSBzdHJ1Y3R1cmUgb2YgdGhhdCBjb2RlIGluIHlvdXIg b3duIGNvZGViYXNlLjwvc3Bhbj48L2Rpdj48YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMw MDAwMDA7Ij5Ib3dldmVyLCB3ZSBhbHdheXMgbWVhbnQgdGhpcyBwcm9jZWR1cmUgdG8gYmVjb21l IGN1c3RvbWl6YWJsZSBhdCBzb21lIHBvaW50LCBwcm9tb3RpbmcgaXQgdG8gYmUgPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDA4MDtmb250LXdlaWdodDogYm9sZDsiPioqc2NhZmZvbGRp bmcqKjwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4uIDwvc3Bhbj48L2Rpdj48 YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5JbiB0aGUgY2FzZSBvZiBzY2Fm Zm9sZGluZywgY29kZSBzaG91bGQgbm90IGJlIGdlbmVyYXRlZCBpbiB5b3VyIGNvbXBpbGF0aW9u IHRhcmdldCBkaXJlY3RvcnksIGJ1dCBpbnN0ZWFkLCBpdCBzaG91bGQgYmUgcHJvbW90ZWQgdG8g eW91ciA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwO2ZvbnQtc3R5bGU6IGl0YWxp YzsiPl9zb3VyY2UgY29kZV88L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+IGRp cmVjdG9yeS4gV2UgYXJlIGN1cnJlbnRseSB3b3JraW5nIG9uIGEgZ2VuZXJhbCBzb2x1dGlvbiB0 byBhbGxvdyB5b3UgdG8gb3B0LW91dCBmcm9tIGNvZGUgZ2VuZXJhdGlvbiBmb3Igc3BlY2lmaWMg YXNzZXRzLCBhbmQgaW5zdGVhZCwgImNsYWltIiBpdCBmb3Igb3duZXJzaGlwLiBGb3IgaW5zdGFu Y2UsIHN1cHBvc2UgdGhhdCB5b3Ugd2FudCB0byBjdXN0b21pemUgPC9zcGFuPjxzcGFuIHN0eWxl PSJjb2xvcjogIzgwMDAwMDsiPmBNeVByb2Nlc3NgPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjog IzAwMDAwMDsiPi4gWW91IHdpbGwgYmUgYWJsZSB0byB0ZWxsIHRoZSBjb2RlLWdlbmVyYXRpb24g cHJvY2VkdXJlIHRoYXQgeW91IHdhbnQgY3VzdG9taXplIHRoYXQgYXNzZXQ6IHRoZSBjb2RlLWdl bmVyYXRpb24gcHJvY2VkdXJlIHdpbGwgcnVuIG9uY2UsIGFuZCB0aGVuIHlvdSB3aWxsIGJlIGFi bGUgdG8gZWRpdCB0aGUgZ2VuZXJhdGVkIGNvZGUgYXMgcmVndWxhciBzb3VyY2UgY29kZS48L3Nw YW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjODAwMDAwO2ZvbnQtd2VpZ2h0 OiBib2xkOyI+IyMgQ29uY2x1c2lvbnM8L3NwYW4+PC9kaXY+PGJyPjxkaXY+PHNwYW4gc3R5bGU9 ImNvbG9yOiAjMDAwMDAwOyI+WW91IHNob3VsZCBub3cgaGF2ZSBhIGJldHRlciB1bmRlcnN0YW5k aW5nIG9mIHRoZSByYXRpb25hbGUgZm9yIGNvZGUgZ2VuZXJhdGlvbiBpbiBLb2dpdG86IGluIHRo ZSBmdXR1cmUgd2UgYXJlIGdvaW5nIHRvIGltcHJvdmUgb3VyIGNvZGUgZ2VuZXJhdGlvbiBwcm9j ZWR1cmUgdG8gYWxsb3cgZXh0ZW5zaWJpbGl0eSBieSBwbHVnZ2luZyBpbnRvIHRoZSBjb2RlLWdl bmVyYXRpb24gcHJvY2VzcywgYW5kIGN1c3RvbWl6YXRpb24gYnkgYWxsb3dpbmcgZW5kLXVzZXJz IHRvIHByb21vdGUgY29kZSBnZW5lcmF0aW9uIHRvIHNjYWZmb2xkaW5nLjwvc3Bhbj48L2Rpdj48 YnI+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5JbiB0aGUgZnV0dXJlIHdlIHdp bGwgZnVydGhlciBkb2N1bWVudCBob3cgd2UgcGxhbiB0byByZWZhY3RvciBvdXIgY29kZWJhc2Ug dG8gc3VwcG9ydCB0aGVzZSBub3ZlbCB1c2UgY2FzZXMuIDwvc3Bhbj48L2Rpdj48YnI+PGRpdj48 c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5ba29naXRvXTogPC9zcGFuPjxzcGFuIHN0eWxl PSJjb2xvcjogIzAwMDAwMDt0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiPmh0dHBzOi8va29n aXRvLmtpZS5vcmc8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7 Ij5bdmRtMTldOiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwO3RleHQtZGVjb3Jh dGlvbjogdW5kZXJsaW5lOyI+aHR0cHM6Ly95b3V0dS5iZS9UV2ZpZ1I5d0dzQTwvc3Bhbj48L2Rp dj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPltxY29uc3AxOV06IDwvc3Bhbj48 c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Ij5o dHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUJVclk2T24xU3hNPC9zcGFuPjwvZGl2Pjxk aXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+W2Fubm90YXRpb25zXTogPC9zcGFuPjxz cGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDt0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiPmh0 dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuY29t cGlsZXIvamF2YXgvYW5ub3RhdGlvbi9wcm9jZXNzaW5nL3BhY2thZ2Utc3VtbWFyeS5odG1sPC9z cGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+W2FzbV06IDwvc3Bh bj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7 Ij5odHRwczovL2FzbS5vdzIuaW8vPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9y OiAjMDAwMDAwOyI+W2phdmFwb2V0XTogPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAw MDt0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiPmh0dHBzOi8vZ2l0aHViLmNvbS9zcXVhcmUv amF2YXBvZXQ8L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7Ij5b amF2YXBhcnNlcl06IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7dGV4dC1kZWNv cmF0aW9uOiB1bmRlcmxpbmU7Ij5odHRwczovL2phdmFwYXJzZXIub3JnLzwvc3Bhbj48c3BhbiBz dHlsZT0iY29sb3I6ICMwMDAwMDA7Ij4gPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNv bG9yOiAjMDAwMDAwOyI+W3JlZmxlY3Rpb25dOiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAj MDAwMDAwO3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyI+aHR0cHM6Ly93d3cub3B0YXBsYW5u ZXIub3JnL2Jsb2cvMjAxOC8wMS8wOS9KYXZhUmVmbGVjdGlvbkJ1dE11Y2hGYXN0ZXIuaHRtbDwv c3Bhbj48L2Rpdj48ZGl2PjxzcGFuIHN0eWxlPSJjb2xvcjogIzAwMDAwMDsiPltuYW5vcGFzc106 IDwvc3Bhbj48c3BhbiBzdHlsZT0iY29sb3I6ICMwMDAwMDA7dGV4dC1kZWNvcmF0aW9uOiB1bmRl cmxpbmU7Ij5odHRwczovL25hbm9wYXNzLm9yZy88L3NwYW4+PC9kaXY+PGRpdj48c3BhbiBzdHls ZT0iY29sb3I6ICMwMDAwMDA7Ij5bbWljcm9uYXV0XTogPC9zcGFuPjxzcGFuIHN0eWxlPSJjb2xv cjogIzAwMDAwMDt0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiPmh0dHBzOi8vbWljcm9uYXV0 LmlvPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwOyI+W3F1YXJr dXNdOiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9yOiAjMDAwMDAwO3RleHQtZGVjb3JhdGlvbjog dW5kZXJsaW5lOyI+aHR0cHM6Ly9xdWFya3VzLmlvPC9zcGFuPjwvZGl2PjxkaXY+PHNwYW4gc3R5 bGU9ImNvbG9yOiAjMDAwMDAwOyI+W2NkaWxpdGVdOiA8L3NwYW4+PHNwYW4gc3R5bGU9ImNvbG9y OiAjMDAwMDAwO3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyI+aHR0cDovL3d3dy5jZGktc3Bl Yy5vcmcvbmV3cy8yMDIwLzAzLzA5L0NESV9mb3JfdGhlX2Z1dHVyZS88L3NwYW4+PC9kaXY+PGJy Pjxicj48L2Rpdj4="&gt;​&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=3ENKNbYB92c:N90xu2dViAg:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=3ENKNbYB92c:N90xu2dViAg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=3ENKNbYB92c:N90xu2dViAg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=3ENKNbYB92c:N90xu2dViAg:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/3ENKNbYB92c" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oS3As5ZkWYA" height="1" width="1" alt=""/&gt;</content><summary>Originally posted here My favorite topic of discussion last year was moving computations to compile-time. In fact, I went to a few conferences explaining how moving processing out of your run-time and into build-time, is a conceptually simple but extremely effective way to make your applications lighter. This was sometimes received with little enthusiasm: the idea itself is in fact far from new. Y...</summary><dc:creator>Edoardo Vacchi</dc:creator><dc:date>2020-04-23T07:45:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/3ENKNbYB92c/kogito-modular-codegen-design-proposal.html</feedburner:origLink></entry><entry><title>Report from the February 2020 ISO C++ meeting (Core Language Working Group)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xMWzVwa0Q9Y/" /><category term="C++" scheme="searchisko:content:tags" /><category term="c++ concepts" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="g++" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>Jason Merrill</name></author><id>searchisko:content:id:jbossorg_blog-report_from_the_february_2020_iso_c_meeting_core_language_working_group</id><updated>2020-04-23T07:00:39Z</updated><published>2020-04-23T07:00:39Z</published><content type="html">&lt;p&gt;The first International Organization for Standardization (ISO) C++ meeting of 2020 happened in Prague, Czechia. It was our first time meeting in Prague, though I&amp;#8217;ve been there a few times for the GNU Tools Cauldron. Two of us from Red Hat attended: Jonathan Wakely serves on the ISO C++ Standards Committee Library Working Group (LWG), and I am part of the Core Language Working Group (CWG). (You can see the ISO C++ committee structure &lt;a href="https://isocpp.org/std/the-committee" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;here&lt;/a&gt;.)&lt;/p&gt; &lt;p&gt;This was our second meeting after sending the C++20 draft standard out for comments from the ISO C++ national bodies. We finished responses to the last round of comments. That went well, and at the end of the week, we voted to send the resulting C++20 standard to the national bodies for ratification.&lt;/p&gt; &lt;p&gt;In the next sections, I&amp;#8217;ll share the thinking behind some of our decisions. Note that this report addresses mostly lower-level issues, unlike my usual trip reports.&lt;/p&gt; &lt;h2&gt;Concepts&lt;/h2&gt; &lt;p&gt;As part of my work on &lt;a href="https://en.cppreference.com/w/cpp/language/constraints" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;concepts&lt;/a&gt;, I contributed wording to the resolution of two closely connected issues.&lt;/p&gt; &lt;h3&gt;Clarify declaration matching&lt;/h3&gt; &lt;p&gt;The first issue is documented in &lt;a href="https://github.com/cplusplus/nbballot/issues/103" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;CA104 13.04 [temp.constr]: Clarify declaration matching and partial ordering requiring substitution into constraints&lt;/a&gt;. Normally, we try to avoid substituting directly into constraints as written in a requires-clause. Instead, we prefer substitution only on atomic constraints as part of determining whether requirements have been satisfied.&lt;/p&gt; &lt;p&gt;In the case of comparing a declaration at namespace scope to a declaration in an instantiation of a class template, however, we must allow a direct substitution in some instances. One example is determining whether a specialization matches:&lt;/p&gt; &lt;pre&gt;template &amp;#60;class T&amp;#62; struct A { template &amp;#60;class U&amp;#62; U f(U) requires C&amp;#60;typename T::type&amp;#62;; template &amp;#60;class U&amp;#62; U f(U) requires C&amp;#60;T&amp;#62;; }; // Substitute int for T in above requirements to find match. template &amp;#60;&amp;#62; template &amp;#60;class U&amp;#62; U A&amp;#60;int&amp;#62;::f(U) requires C&amp;#60;int&amp;#62; { } &lt;/pre&gt; &lt;h3&gt;Hidden non-template friends&lt;/h3&gt; &lt;p&gt;The second issue is from &lt;a href="https://github.com/cplusplus/nbballot/issues/114" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;US115 13.6.4 [temp.friend]: Hidden non-template friends need a requires-clause&lt;/a&gt;. Until now, it was considered ill-formed for a non-template friend declaration to have a requires-clause. The ISO C++ committee reasoned that it would be unclear whether the non-template friend declaration was trying to match a given constrained overload, or if it was trying to declare friendship only if the requirements are satisfied. We determined that removing constraints on non-template functions renders the first concern meaningless. The second concern remains an undesirable difference from constraint semantics in all other situations.&lt;/p&gt; &lt;p&gt;If the friend is defined in the class body, then having a requires-clause makes just as much sense as it does on a member function. That is, the clause can be used to define a particular operation for a class template, depending on the characteristics of the template arguments. The library was already allowing this behavior even though the language said it was invalid.&lt;/p&gt; &lt;p&gt;We resolved to allow the requires-clause on a friend that is defined in a templated class. To avoid the kind of substitution needed for partial specialization matching (as shown in the code sample), we said that any friend template with a constraint that depends on a template parameter of the class must also be defined in the class body. If the constraint only depends on the friend&amp;#8217;s template parameters, it can be a declaration to match with a template defined at namespace scope.&lt;/p&gt; &lt;h3&gt;Changing concept values&lt;/h3&gt; &lt;p&gt;Continuing with concepts, we addressed &lt;em&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2104r0.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Disallow changing concept values&lt;/a&gt;&lt;/em&gt;. This paper resolves GB046 as &amp;#8220;accepted with modifications.&amp;#8221;&lt;/p&gt; &lt;p&gt;We noticed when working on concepts in the G++ compiler that the draft allowed the satisfaction of a declaration to vary within a translation unit. This meant, for example, that a declaration could be satisfied by a class becoming complete. Supporting this change slows down the compiler because we could no longer remember the results of a previous check across events such as completing a class definition. The decision to disallow changing concept values means that we don&amp;#8217;t have to worry about that problem, and we can speed up the compiler again. As a caveat, the current resolution breaks a fair amount of concept code, so more investigation is needed.&lt;/p&gt; &lt;h3&gt;Function template constraints&lt;/h3&gt; &lt;p&gt;For the &lt;em&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2113r0.html" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Proposed resolution for 2019 comment CA 112&lt;/a&gt;,&lt;/em&gt; we resolved to clarify that a function template can only be considered more constrained than another if the template parameters are otherwise equivalent.&lt;/p&gt; &lt;h2&gt;Modules&lt;/h2&gt; &lt;p&gt;We addressed three proposals dealing with the complications of entities that were once local to a translation unit. In a module interface unit, such entities could become visible to importing translation units:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;em&gt;&lt;a href="http://wg21.link/p1815r2" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;P1815R2: Translation-unit-local entities&lt;/a&gt;&lt;/em&gt; makes it ill-formed for an exported declaration to expose a translation-local entity.&lt;/li&gt; &lt;li&gt;&lt;em&gt;&lt;a href="http://wg21.link/p1779r3" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;P1779R3: ABI isolation for member functions&lt;/a&gt;&lt;/em&gt; makes functions defined in a class body within a module no longer implicitly &lt;em&gt;inline&lt;/em&gt;, so that they can use local entities without exposing them.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p2115r0" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;&lt;em&gt;P2115R0: Merging of multiple definitions for unnamed unscoped enumerations&lt;/em&gt;&lt;/a&gt; deals with how we merge unnamed file-scope enumerations from header files that might not have the same set of enumerators in different translation units.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each of these patterns previously violated the &lt;em&gt;one definition rule&lt;/em&gt; (ODR) but worked in practice. Note that a compiler is free to inline a function that is not declared &lt;code&gt;inline&lt;/code&gt;, so the P1779 change need not affect performance. On ELF targets such as GNU/Linux, which allow symbols to be overridden by other definitions, the GNU Compiler Collection (GCC) currently does not inline replaceable functions unless the user specifies &lt;code&gt;-fno-semantic-interposition&lt;/code&gt;. We could address this issue in the GCC Modules implementation by assuming no interposition for functions defined in a module interface unit.&lt;/p&gt; &lt;h2&gt;Miscellaneous&lt;/h2&gt; &lt;p&gt;We also addressed several miscellaneous papers. One of these, &lt;a href="http://wg21.link/p0593r6" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;&lt;em&gt;P0593R6:&lt;/em&gt; Implicit creation of objects for low-level object manipulation&lt;/a&gt;, offers a new model for when objects are considered to have been created in &lt;code&gt;malloc&lt;/code&gt;ed memory or a &lt;code&gt;char&lt;/code&gt; buffer. Any objects necessary are considered to have been created implicitly by the &lt;code&gt;malloc&lt;/code&gt; or creation of the buffer. The new model should bring more clarity to type-based aliasing rules in C++.&lt;/p&gt; &lt;p&gt;We also addressed the proposal &lt;em&gt;&lt;a href="http://wg21.link/p1957r2" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;P1957R2: Converting from T* to bool should be considered narrowing&lt;/a&gt;&lt;/em&gt;. It was surprising to realize that we had not previously considered a pointer-to-bool conversion to be narrowing; however, experimentation suggests that making that change would result in far more bugs than false positives.&lt;/p&gt; &lt;p&gt;The resolution to &lt;em&gt;&lt;a href="http://wg21.link/p1937r2" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;P1937R2: Fixing inconsistencies between constexpr and consteval functions&lt;/a&gt;&lt;/em&gt; states that a &lt;code&gt;consteval&lt;/code&gt; call can no longer be immediately evaluated in an unevaluated context.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://isocpp.org/std/meetings-and-participation/upcoming-meetings" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;next meeting&lt;/a&gt; was scheduled for June 2020 in Varna, Bulgaria. It has been postponed indefinitely due to COVID-19.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#38;linkname=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F04%2F23%2Freport-from-the-february-2020-iso-c-meeting-core-language-working-group%2F&amp;#038;title=Report%20from%20the%20February%202020%20ISO%20C%2B%2B%20meeting%20%28Core%20Language%20Working%20Group%29" data-a2a-url="https://developers.redhat.com/blog/2020/04/23/report-from-the-february-2020-iso-c-meeting-core-language-working-group/" data-a2a-title="Report from the February 2020 ISO C++ meeting (Core Language Working Group)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/04/23/report-from-the-february-2020-iso-c-meeting-core-language-working-group/"&gt;Report from the February 2020 ISO C++ meeting (Core Language Working Group)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xMWzVwa0Q9Y" height="1" width="1" alt=""/&gt;</content><summary>The first International Organization for Standardization (ISO) C++ meeting of 2020 happened in Prague, Czechia. It was our first time meeting in Prague, though I’ve been there a few times for the GNU Tools Cauldron. Two of us from Red Hat attended: Jonathan Wakely serves on the ISO C++ Standards Committee Library Working Group (LWG), and I am part of the Core Language Working Group (CWG). (You can...</summary><dc:creator>Jason Merrill</dc:creator><dc:date>2020-04-23T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/04/23/report-from-the-february-2020-iso-c-meeting-core-language-working-group/</feedburner:origLink></entry></feed>
